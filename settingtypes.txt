# This file contains settings of Antum game that can be changed in
# minetest.conf


# ---------------------------------------------------------------------------------

[Built-in]

# Defines the maximal player transfer distance in blocks (0 = unlimited).
player_transfer_distance (Player transfer distance) int 0

# If enabled, you can place blocks at the position (feet + eye level) where you stand.
# This is helpful when working with nodeboxes in small areas.
enable_build_where_you_stand (Build inside player) bool false

# Player is able to fly without being affected by gravity.
# This requires the "fly" privilege on the server.
free_move (Flying) bool false

# If enabled, makes move directions relative to the player's pitch when flying or swimming.
pitch_move (Pitch move mode) bool false

# Fast movement (via the "special" key).
# This requires the "fast" privilege on the server.
fast_move (Fast movement) bool false

# If enabled together with fly mode, player is able to fly through solid nodes.
# This requires the "noclip" privilege on the server.
noclip (Noclip) bool false


[General]


# Tools & weapons will wear down & break when used for digging, chopping, etc.
enable_tool_wear (Tools wear & break on use) bool true

# Tools & weapons will wear down & break when used for attacking/fighting.
enable_weapon_wear (Weapons wear & break when fighting) bool true

# Print extra debugging messages.
debug_mods (Debug mods) bool false

# Logs extra debug messages.
enable_debug_mods (Enable debugging messages) bool false

# Limits flowing liquids.
liquid_finite (Finite liquid) bool false

# Inventory interface to use.
inventory (Inventory interface) enum sfinv sfinv,inventory_plus

# Allow players to craft ATM machines.
allow_atm_craft (Allow ATM crafting) bool true


[*Mobs General]

# Only spawn mobs that don't attack players.
only_peaceful_mobs (Peaceful only) bool false

# Displays nametags above mobs.
enable_mob_nametags (Enable mob nametags) bool false


[*Mounts]

# Mounts turn with player look direction.
#
# Often mounts use the a/d keys for turning. For mods that respect
# this setting, this will be changed to turn with the direction the
# player is looking.
mount_turn_player_look (Turn with look direction) bool false

# Mounted entities can only be used by owners.
mount_ownable (Ownable mounts) bool true

# Place mountable entities in inventory instead of breaking down when punched.
mount_punch_inv (Place object in inventory) bool true



# ---------------------------------------------------------------------------------

[Mods]


[*Mobiles]


[**mobs_redo]

# If false then mobs no longer spawn in world without spawner or spawn egg
mobs_spawn (Spawn Mobs) bool true

# Disable blood splatter when attacking mobs.
mobs_disable_blood (Disable Mob blood) bool false

# If disabled then Mobs no longer destroy world blocks
mobs_griefing (Griefing Mobs) bool true

# If false then Mobs no longer spawn inside player protected areas
mobs_spawn_protected (Spawn Mobs in protected areas) bool true

# If true Mobs will be removed once a map chunk is out of view
remove_far_mobs (Remove far Mobs) bool true

# Sets Mob difficulty level by multiplying punch damage
mob_difficulty (Mob difficulty) float 1.0

# If disabled health status no longer appears above Mob when punched
mob_show_health (Show Mob health) bool true

# Contains a value used to multiply Mob spawn values
mob_chance_multiplier (Mob chance multiplier) float 1.0

# When false Mob no longer drop items when killed
mobs_drop_items (Mob drops) bool true

# Sets minimum distance around player that mobs cannot spawn
mob_nospawn_range (Mob no-spawn range) float 12.0

# Sets maximum number of active mobs in game (0 for unlimited)
mob_active_limit (Mob Active Limit) float 0

# Enables area check when spawning mobs
mob_area_spawn (Mob Area Spawn) bool false

# Enable peaceful player attack prevention
enable_peaceful_player (Mobs do not attack peaceful player without reason) bool false


[**cmer]

mobs.particles (Enable particles) bool false

# Displays nametags above mobs.
mobs.nametags (Enable mob nametags) bool false

# Determines if owned entities can be killed by non-owners.
mobs.grief_owned (Players can kill owned) bool false


[**chicken]

# Entity lifespan.
#
# type:    int
# default: 300
chicken.lifetime (Lifespan) int 300 1

# Spawn interval in seconds.
#
# type:    int
# default: 120
chicken.spawn_interval (Spawn interval) int 120 1

# Chance of spawn at interval.
#
# type:    int
# default: 9000
chicken.spawn_chance (Spawn chance) int 9000 1


[**cow]

# Spawn interval in seconds.
#
# type:    int
# default: 60
cow.spawn_interval (Spawn interval) int 60 1

# Chance of spawn at interval.
#
# type:    int
# default: 8000
cow.spawn_chance (Spawn chance) int 8000 1


[**ghost]

# Entity lifespan.
#
# type:    int
# default: 300
ghost.lifetime (Lifespan) int 300 1

# Spawn interval in seconds.
#
# type:    int
# default: 40
ghost.spawn_interval (Spawn interval) int 40 1

# Chance of spawn at interval.
#
# type:    int
# default: 7300
ghost.spawn_chance (Spawn chance) int 7300 1


[**kitten]

# Spawn interval in seconds.
#
# type:    int
# default: 60
kitten.spawn_interval (Spawn interval) int 60 1

# Chance of spawn at interval.
#
# type:    int
# default: 10000
kitten.spawn_chance (Spawn chance) int 10000 1


[**oerkki]

# Entity lifespan.
oerkki.lifetime (Lifespan) int 540 1

# Spawn interval in seconds.
oerkki.spawn_interval (Spawn interval) int 55 1

# Chance of spawn at interval.
oerkki.spawn_chance (Spawn chance) int 7800 1


[**shark]

# Interval in seconds that specifies how often shark spawns.
shark.interval (Shark spawn interval) int 60 0

# Chance for each node of spawning shark at each interval. The value
# is inverted. So a chance of value of 5000 equals 1/5000.
shark.chance (Shark spawn chance) int 5000 0

# Minimum node light required for spawning. "0" is darkest & "14" is
# lightest (daylight).
# See: [Node definition] light_source
shark.min_light (Shark min spawn light) int 4 0 14

# Maximum node light required for spawning. "0" is darkest & "14" is
# lightest (daylight).
# See: [Node definition] light_source
shark.max_light (Shark max spawn light) int 14 0 14

# Minimum height at which shark can spawn.
shark.min_height (Shark min spawn height) int -500

# Maximum height at which shark can spawn.
shark.max_height (Shark max spawn height) int 500

# Times that shark can spawn.
#
# Modes supported:
# | ■ day:   spawns during day
# | ■ night: spawns during night
# | ■ any:   spawns anytime
shark.spawn_time (Shark spawn time) enum any day,night,any


[**skeleton]

# Entity lifespan.
#
# type:    int
# default: 900
skeleton.lifetime (Lifespan) int 900 1

# Spawn interval in seconds.
#
# type:    int
# default: 120 (2 minutes)
skeleton.spawn_interval (Spawn interval) int 120 1

# Chance of spawn at interval.
#
# type:    int
# default: 7000
skeleton.spawn_chance (Spawn chance) int 7000 1


[**sneeker]

# Extra debugging messages.
enable_debug_mods (Mod debugging) bool false

# How long (in seconds) sneeker remains in world after spawn.
#
# Default: 900 (15 minutes)
sneeker.lifetime (Sneeker lifetime) int 900

# Loudness of explosion.
#
# Those with a weak heart might want to turn it down.
sneeker.boom_gain (Boom volume) float 1.5

# Determines whether or not a player must be close for spawn to occur.
sneeker.spawn_require_player_nearby (Require player nearby for spawn) bool true

# Distance in nodes a player must be for spawn to occur.
#
# Only used if `sneeker.spawn_require_player_nearby` enabled.
sneeker.spawn_player_radius (Player spawn detect radius) int 100

# If enabled, mobs not near any players will despawn.
sneeker.despawn_player_far (Despawn sneekers not near players) bool true

# Distance determining if a player is near enough to prevent despawn.
#
# Only used if `sneeker.despawn_player_far` enabled.
sneeker.despawn_player_radius (Player despawn detect radius) int 500

# Sets possibility for spawn.
#
# Rate is the inverted value (e.g. 1/value).
sneeker.spawn_chance (Sneeker spawn chance) int 10000

# Sets frequency of spawn chance. Default 240 is equivalent to 4 minutes (60 * 4).
sneeker.spawn_interval (Sneeker spawn interval) int 240

# Sets the minimum light that a node must have for spawn to occur.
sneeker.spawn_minlight (Sneeker min light for spawn) int 0 0 15

# Sets the maximum light that a node can have for spawn to occur.
sneeker.spawn_maxlight (Sneeker max light for spawn) int 4 0 15

# Sets the lowest position at which sneeker can spawn.
sneeker.spawn_minheight (Sneeker min spawn height) int -31000

# Sets the highest position at which sneeker can spawn.
sneeker.spawn_maxheight (Sneeker max spawn height) int 31000

# Limits the number of entities that can spawn per mapblock (16x16x16).
sneeker.spawn_mapblock_limit (Sneeker spawn limit) int 1


[**spider]

# Entity lifespan.
spider.lifetime (Spider lifetime) int 600 1

# Spawn rate frequency.
spider.spawn_interval (Spawn interval) int 60 1

# Chance of spawn at interval.
spider.spawn_chance (Spawn chance) int 7500 1


[**velociraptor]

# Used alternate "feathered" texture.
mobs.velociraptor_feathered (Feathered velociraptor) bool false

# Interval in seconds that specifies how often velociraptor spawns.
mobs.velociraptor_interval (Velociraptor spawn interval) int 30 0

# Chance for each node of spawning velociraptor at each interval. The value
# is inverted. So a chance of value of 32000 equals 1/32000.
mobs.velociraptor_chance (Velociraptor spawn chance) int 32000 0

# Minimum node light required for spawning. "0" is darkest & "14" is
# lightest (daylight).
# See: [Node definition] light_source
mobs.velociraptor_min_light (Velociraptor min spawn light) int 10 0 14

# Maximum node light required for spawning. "0" is darkest & "14" is
# lightest (daylight).
# See: [Node definition] light_source
mobs.velociraptor_max_light (Velociraptor max spawn light) int 14 0 14

# Maximum height at which velociraptor can spawn.
mobs.velociraptor_max_height (Velociraptor max spawn height) int 31000

# Times that velociraptor can spawn.
#
# Modes supported:
# | ■ day:   spawns during day
# | ■ night: spawns during night
# | ■ any:   spawns anytime
mobs.velociraptor_spawn_time (Velociraptor spawn time) enum any day,night,any


[**whinny]

# If enabled, messages all players when spawned.
display_mob_spawn (Display spawn) bool false

# If disabled, whinny will attack players.
whinny.peaceful_only (Only peaceful) bool true

# Inverted chance that entity will spawn.
whinny.spawn_chance (Spawn chance) int 50000 0

# Minimum height at which entity can spawn.
whinny.spawn_height_min (Spawn min height) int -500

# Maximum height at which entity can spawn.
whinny.spawn_height_max (Spawn max height) int 500


[**zombie]

# Entity lifespan.
#
# type:    int
# default: 300 (5 minutes)
zombie.lifetime (Lifespan) int 300 1

# Spawn interval in seconds.
#
# type:    int
# default: 36
zombie.spawn_interval (Spawn interval) int 36 1

# Chance of spawn at interval.
#
# type:    int
# default: 7600
zombie.spawn_chance (Spawn chance) int 7600 1


[*airtanks]

# Number of uses for steel air tanks.
airtanks_steel_uses (Steel air tank uses) int 30 2 1000

# Number of uses for copper air tanks.
airtanks_copper_uses (Copper air tank uses) int 10 2 1000

# Number of uses for bronze air tanks.
airtanks_bronze_uses (Bronze air tank uses) int 20 2 1000

# If 'enable_tool_wear' is enabled, air tanks will begin to wear out when used.
airtanks_enable_wear (Wear out when used) bool true

# Air tanks will wear out even in creative mode.
airtanks_wear_in_creative (Wear out in creative mode) bool true

# Enable double tanks.
airtanks_enable_double (Enable double tanks) bool true

# Enable triple tanks.
airtanks_enable_triple (Enable triple tanks) bool true

# Compressor requires fuel.
airtanks_compressor_needs_fuel (Compressor requires fuel) bool true


[*awards]

# Add default achievements from the awards mod.
awards.add_defaults (Add Default Achievements) bool true


[*bike]

# The maximum speed of a bike in m/s
bike_max_speed (Maximum speed) float 6.9

# The acceleration of a bike in m/s^2
bike_acceleration (Acceleration) float 3.16

# The decceleration of a bike caused by braking in m/s^2
bike_decceleration (Decceleration) float 7.9

# The decceleration of a bike caused by friciton in m/s^2
bike_friction (Friction) float 0.79

# The turning speed of a stopped bike in rad/s
bike_turn_speed (Turn speed) float 1.58

# The speed in m/s bellow which the bike accelerates linearily
bike_friction_cone (Friction cone) float 0.4

# How many nodes can be climbed/jumped
bike_stepheight (Step height) float 0.6 0

# How many nodes can be climbed/jumped with wheely
bike_wheely_stepheight (Wheely step height) float 0.6 0

# The factor by which the turning speed is increased by wheely
bike_wheely_factor (Wheely factor) float 2.0

# The factor by which the bike slows down per second in water
bike_water_friction (Water friction) float 13.8

# The factor by which the bike slows down per second offroad
bike_offroad_friction (Offroad friction) float 1.62


[*bright_night]

# Minimum light level for night time. Must be between 3 and 15.
bright_night_light (Night light level) int 4


[*chatlog]

# Timestamp format (see: https://www.lua.org/pil/22.1.html).
#
# Default: %m/%d/%Y %H:%M:%S (mm/dd/yyyy hh:mm:ss)
chatlog.format (Timestamp format) string %m/%d/%Y %H:%M:%S

# Chatlog is output to single file (chatlog.txt) instead
# of split into files by date (chatlog/YYYY_MM_DD.txt).
chatlog.single_file (Single file chatlog) bool false

# Disables exporting chat.
chatlog.disable (Disable chatlog) bool false


[*cleaner]

# Enables unsafe methods.
#
# - cleaner.remove_ore
cleaner.unsafe (Enable unsafe methods) bool false


[*craftguide]

# The progressive mode shows recipes you can craft from items you ever had in your inventory.
craftguide_progressive_mode (Learn crafting recipes progressively) bool false

# Enables/Disables craftguide button in inventory if sfinv mod present.
craftguide.show_inv_button (Show craftguide in inventory) bool false


[*currency]

# Is income enabled?
currency.income_enabled (Is currency income enabled?) bool true

# Is income enabled for creative players?
currency.creative_income_enabled (Is income enabled for creative players?) bool true

# Item that is given as income by the currency mod.
currency.income_item (Currency income item) string currency:minegeld_10

# Number of items given as income.
currency.income_count (Currency income item) int 1 1 65535

# Length of time (in seconds) between checking if a user should get income.
currency.income_period (Currency income period) int 720


[*ethereal]

ethereal.leaftype (0 for 2D plantlike leaves or 1 for 3D) int 0
ethereal.leafwalk (Walkable leaves) bool false

ethereal.cavedirt (Caves cut through dirt) bool true
ethereal.torchdrop (Torches drop when in water) bool true
ethereal.papyruswalk (Papyrus and Bamboo are walkable) bool true
ethereal.lilywalk (Lilypads are walkable) bool true
ethereal.xcraft (Enable X-Craft cheats) bool true
ethereal.flight (Enable Flight Potion) bool true

ethereal.glacier (Glacier biome, 1 = Enable / 0 = Disable) int 1
ethereal.bambo (Bamboo biome, 1 = Enable / 0 = Disable) int 1
ethereal.mesa (Mesa biome, 1 = Enable / 0 = Disable) int 1
ethereal.alpine (Alpine biome, 1 = Enable / 0 = Disable) int 1
ethereal.healing (Healing Tree biome, 1 = Enable / 0 = Disable) int 1
ethereal.snowy (Pine Tree biome, 1 = Enable / 0 = Disable) int 1
ethereal.frost (Blue Frost biome, 1 = Enable / 0 = Disable) int 1
ethereal.grassy (Grassy biome, 1 = Enable / 0 = Disable) int 1
ethereal.caves (Desertstone biome, 1 = Enable / 0 = Disable) int 1
ethereal.grayness (Grey Willow biome, 1 = Enable / 0 = Disable) int 1
ethereal.grassytwo (GrassyTwo biome, 1 = Enable / 0 = Disable) int 1
ethereal.prairie (Prairie biome, 1 = Enable / 0 = Disable) int 1
ethereal.jumble (Jumble biome, 1 = Enable / 0 = Disable) int 1
ethereal.junglee (Jungle biome, 1 = Enable / 0 = Disable) int 1
ethereal.desert (Desert biome, 1 = Enable / 0 = Disable) int 1
ethereal.grove (Banana Grove biome, 1 = Enable / 0 = Disable) int 1
ethereal.mushroom (Mushroom biome, 1 = Enable / 0 = Disable) int 1
ethereal.sandstone (Sandstone biome, 1 = Enable / 0 = Disable) int 1
ethereal.quicksand (Quicksand Bank biome, 1 = Enable / 0 = Disable) int 1
ethereal.plains (Scorched Plains biome, 1 = Enable / 0 = Disable) int 1
ethereal.savanna (Savanna biome, 1 = Enable / 0 = Disable) int 1
ethereal.fiery (Feiry Lava biome, 1 = Enable / 0 = Disable) int 1
ethereal.sandclay (Sandy Clay biome, 1 = Enable / 0 = Disable) int 1
ethereal.swamp (Swamp biome, 1 = Enable / 0 = Disable) int 1
ethereal.sealife (Coral and Seaweed biome, 1 = Enable / 0 = Disable) int 1
ethereal.reefs (MT5 Coral biome, 1 = Enable / 0 = Disable) int 1
ethereal.sakura (Sakura biome, 1 = Enable / 0 = Disable) int 1
ethereal.tundra (Tundra biome, 1 = Enable / 0 = Disable) int 1
ethereal.mediterranean (Mediterranean biome, 1 = Enable / 0 = Disable) int 1


[*hbarmor]

#If true, automatically hides the armor HUD bar when the player wears no
#armor. Otherwise, the armor bar shows “0%”.
hbarmor_autohide (Automatically hide armor HUD bar) bool true

#Time difference in seconds between updates to the armor HUD bar.
#Increase this number for slow servers.
hbarmor_tick (Armor HUD bar update frequency) float 0.1 0.0 4.0


[*hbsprint]

# If enabled (default), the stamina indicators in the HUD will be automatically hidden shortly
# after stamina has filled up. Otherwise, stamina will always be displayed.
hudbars_autohide_stamina (Automatically hide staminal indicator) bool true

# Sprint speed multiplier.
sprint_speed (Sprint speed multiplier) float 1.3

# Sprint jump multiplier.
sprint_jump (Sprint jump multiplier) float 1.1

# Which key to use for sprint. Default: "Use" ("E" key by default).
sprint_key (Sprint key) enum Use Use

# Require player to move forward only to be able to sprint.
sprint_forward_only (Sprint forward only) bool true

# The amount of particles to spawn behind a sprinting player.
sprint_particles (Particles) float 2

# Drain stamina while sprinting.
sprint_stamina (Stamina) bool true

# The amount of stamina to drain while sprinting.
sprint_stamina_drain (Stamina drain) float 2

# The amount of seconds before starting to replenish stamina.
sprint_stamina_replenish (Stamina replenish) float 2

# Drain satiation while sprinting.
sprint_starve (Starve) bool true

# The amount of satiation to drain while sprinting.
sprint_starve_drain (Starve drain) float 0.5

# Drain air while sprinting under water.
sprint_breath (Breath) bool true

# The amount of air to drain while sprinting under water.
sprint_breath_drain (Breath drain) float 1


[*hidename]

# Use alpha color level to hide nametag instead of clearing text.
hidename.use_alpha (Use nametag alpha level) bool false


[*hud_compass]

#    Define default to place compass and whether to use clock.
#    -1 to -4 = compass only (disabled), -5 to -8 = compass + clock (disabled)
#    1 to 4 = compass only (enabled), 5 to 8 = compass + clock (enabled)
#    (default = -2)
compass_default_corner (Default corner to place compass) enum -2 -8,-7,-6,-5,-4,-3,-2,-1,1,2,3,4,5,6,7,8


[*hudbars]

[**Appearance]

# Specifies how the value indicators (i.e. health, breah, etc.) look.
#
# There are 3 styles available. You can choose between the default
# progress-bar-like bars and the good old statbars like you know from
# vanilla Minetest.
#
# The following values are allowed:
# | ■ progress_bar:
# |     ● A horizontal progress-bar-like bar with a label, showing
# |       numerical value (current, maximum), and an icon. These
# |       bars usually convey the most information. This is the
# |       default and recommended value.
# | ■ statbar_classic:
# |     ● Classic statbar, like in vanilla Minetest. Made out of
# |       up to 20 half-symbols. Those bars represent the vague
# |       ratio between the current value and the maximum value.
# |       1 half-symbol stands for approximately 5% of the maximum
# |       value.
# | ■ statbar_modern:
# |     ● Like the classic statbar, but also supports background
# |       images, this kind of statbar may be considered to be
# |       more user-friendly than the classic statbar. This bar
# |       type closely resembles the mod “Better HUD” [hud] by
# |       BlockMen.
hudbars_bar_type (HUD bars style) enum progress_bar progress_bar,statbar_classic,statbar_modern


# If enabled (default), the breath indicators in the HUD will be automatically hidden shortly
# after the breath has been filled up. Otherwise, the breath will always be displayed.
hudbars_autohide_breath (Automatically hide breath indicators) bool true

# This setting changes the way the HUD bars are ordered on the display. You can choose
# between a zig-zag pattern (default) or a vertically stacked pattern.
#
# The following values are allowed:
# | ■ zigzag:
# |     ● Starting from the left bottom, the next is right
# |       from the first, the next is above the first, the
# |       next is right of the third, etc.
# | ■ stack_up:
# |     ● The HUD bars are stacked vertically, going upwards.
# | ■ stack_down:
# |     ● The HUD bars are stacked vertically, going downwards.
hudbars_alignment_pattern (HUD bars alignment pattern) enum zigzag zigzag,stack_up,stack_down

# This setting allows you to specify the order of the HUD bars explicitly. If left empty
# (the default), the health and breath indicators come first, additional indicators
# may appear in any order. This setting is quite technical and normal users probably do not
# need to worry about it.
#
# Syntax:
# The setting has to be specified as a comma-seperated list of key=value pairs, where a key
# refers to the identifier of a HUD bar and the value refers to the slot number of where the
# HUD bar should be placed. The slot number must be an integer greater of equal to 0. Where
# the HUD bars will be displayed exactly depends on the alignment pattern being used.
# All HUD bars to which no order value has been applied will fill in all slots which have
# not been occupied by the HUD bars specified in this setting, the slots will be filled in
# from the lowest slot number.
# Note that the order of those remaining HUD bars is not fixed, it basically just boils
# down on which mod “came” first. Don't worry, the mod will still work perfectly fine, this
# setting is entirely optional.
# The identifier for the health bar is “health” and the identifier for the breath bar is
# “breath”. For other HUD bars, you have to learn it from the mod which is supplying them.
#
# Be careful not to use slot indices twice, or else different HUD bars will be drawn over
# each other!
#
# Example: “breath=0, health=1”
# This makes the breath bar first and the health bar second, which is the opposite order
# of the default one.
hudbars_sorting (HUD bars order) string

[**Positions and offsets]

# Horizontal (x) main position of the HUD bars over the entire screen.
# 0.0 is left-most, 1.0 is right-most.
# For the zig-zag alignment pattern, this is for the left HUD bars.
hudbars_pos_left_x (Left HUD bar screen x position) float 0.5 0.0 1.0

# Vertical (y) main position of the HUD bars over the entire screen.
# 0.0 is top, 1.0 is bottom.
# For the zig-zag alignment pattern, this is for the left HUD bars.
hudbars_pos_left_y (Left HUD bar screen y position) float 1.0 0.0 1.0

# Horizontal (x) main position of the right HUD bars over the entire screen.
# 0.0 is left-most, 1.0 is right-most.
# Only used for the zig-zag alignment pattern.
hudbars_pos_right_x (Right HUD bar screen x position) float 0.5 0.0 1.0

# Vertical main position (y) of the right HUD bars over the entire screen.
# 0.0 is top, 1.0 is bottom.
# Only used for the zig-zag alignment pattern.
hudbars_pos_right_y (Right HUD bar screen y position) float 1.0 0.0 1.0

# Precise x offset in pixels from the basic screen x position of the HUD bars.
# For the zig-zag alignment pattern, this is for the left HUD bars.
# This setting is used for the progress bar HUD bar style.
hudbars_start_offset_left_x (Left HUD bar x offset) int -175

# Precise y offset in pixels from the basic screen y position of the HUD bars.
# For the zig-zag alignment pattern, this is for the left HUD bars.
# This setting is used for the progress bar HUD bar style.
hudbars_start_offset_left_y (Left HUD bar y offset) int -86

# Precise x offset in pixels from the basic screen x position of the right HUD bars.
# Only used for the zig-zag alignment pattern.
# This setting is used for the progress bar HUD bar style.
hudbars_start_offset_right_x (Right HUD bar x offset) int 15

# Precise y offset in pixels from the basic screen y position of the right HUD bars.
# Only used for the zig-zag alignment pattern.
# This setting is used for the progress bar HUD bar style.
hudbars_start_offset_right_y (Right HUD bar y offset) int -86

# Precise x offset in pixels from the basic screen x position of the HUD statbars.
# For the zig-zag alignment pattern, this is for the left HUD statbars.
# This setting is used for the classic and modern statbar styles.
hudbars_start_statbar_offset_left_x (Left HUD statbar x offset) int -265

# Precise y offset in pixels from the basic screen y position of the HUD statbars.
# For the zig-zag alignment pattern, this is for the left HUD statbars.
# This setting is used for the classic and modern statbar styles.
hudbars_start_statbar_offset_left_y (Left HUD statbar y offset) int -90

# Precise x offset in pixels from the basic screen x position of the right HUD statbars.
# Only used for the zig-zag alignment pattern.
# This setting is used for the classic and modern statbar styles.
hudbars_start_statbar_offset_right_x (Right HUD statbar x offset) int 25

# Precise y offset in pixels from the basic screen y position of the right HUD statbars.
# Only used for the zig-zag alignment pattern.
# This setting is used for the classic and modern statbar styles.
hudbars_start_statbar_offset_right_y (Right HUD statbar y offset) int -90

# The vertical distance between two HUD bars, in pixels.
hudbars_vmargin (Vertical distance between HUD bars) int 24 0

[**Performance]

# The of seconds which need to pass before the server updates the default HUD bars
# (health and breath). Increase this number if you have a slow server or a slow network
# connection and experience performance problems.
hudbars_tick (Default HUD bars update interval) float 0.1 0.0 4.0


[*listitems]

# Displays items in a bulleted list.
listitems.bullet_list (Bulleted list) bool true

# Registers "/list<type>" commands.
listitems.enable_singleword (Enable singleword commands) bool true


[*moreblocks]

# If enabled, Stairs+ nodes will be displayed in the inventory when playing in creative mode.
# Disabling this can speed up loading times for clients as fewer nodes need to be registered in the creative inventory.
moreblocks.stairsplus_in_creative_inventory (Display Stairs+ nodes in creative inventory) bool true


[*motorbike]

# If enabled, bike is placed in inventory when punched.
motorbike.punch_inv (Punch places in inventory) bool false


[*pbmarks]

# Number of allowed bookmarks.
pbmarks.max (Number of bookmarks) int 5 1 5

# Don't allow bookmarks to be set in areas not accessible to player.
pbmarks.disallow_protected (Disallow bookmarking in protected areas) bool true


[*pipeworks]

#Enable pipes.
pipeworks_enable_pipes (Enable Pipes) bool true

#Enable autocrafter.
pipeworks_enable_autocrafter (Enable Autocrafter) bool true

#Enable deployer.
pipeworks_enable_deployer (Enable Deployer) bool true

#Enable dispenser.
pipeworks_enable_dispenser (Enable Dispenser) bool true

#Enable node breaker.
pipeworks_enable_node_breaker (Enable Node Breaker) bool true

#Enable teleport tube.
pipeworks_enable_teleport_tube (Enable Teleport Tube) bool true

#Enable pipe devices.
pipeworks_enable_pipe_devices (Enable Pipe Devices) bool true

#Enable redefines.
pipeworks_enable_redefines (Enable Node Redefines) bool true

#Enable sorting tube.
pipeworks_enable_mese_tube (Enable Sorting Tube) bool true

#Enable detector tube.
pipeworks_enable_detector_tube (Enable Detector Tube) bool true

#Enable digiline detector tube.
pipeworks_enable_digiline_detector_tube (Enable Digiline Detector Tube) bool true

#Enable mesecon signal conducting tube.
pipeworks_enable_conductor_tube (Enable Conductor Tube) bool true

#Enable accelerator tube.
pipeworks_enable_accelerator_tube (Enable Accelerator Tube) bool true

#Enable crossing tube.
#It sends all incoming items to the other side, or if there is no other tube, it sends them back.
pipeworks_enable_crossing_tube (Enable Crossing Tube) bool true

#Enable vacuum tube.
#It picks up all items that lay around next to it.
pipeworks_enable_sand_tube (Enable Vacuum Tube) bool true

#Enable mese vacuum tube.
#It's like the normal vacuum tube with the
#differance that you can set the radius up to 8 nodes.
pipeworks_enable_mese_sand_tube (Enable Mese Vacuum Tube) bool true

#Enable one way tube.
#It sends items only in one direction.
#Use it to drop items out of tubes.
pipeworks_enable_one_way_tube (Enable One Way Tube) bool true

#Enable high priority tube.
#It has a very high priority and so, on crossings, the items will
#always go to it if there are multible ways.
pipeworks_enable_priority_tube (Enable High Priority Tube) bool true

#Enable cyclic mode.
pipeworks_enable_cyclic_mode (Enable Cyclic Mode) bool true

#Drop on routing fail.
pipeworks_drop_on_routing_fail (Drop On Routing Fail) bool false

#Delete item on clearobject.
pipeworks_delete_item_on_clearobject (Delete Item On Clearobject) bool true


[*pvp_areas]

# Allow PvP by default.
pvp_areas.enable_pvp (PvP by default) bool false

# When not enabled PvP Control areas are kill zones.
pvp_areas.safemode (PvP Control areas are safe zones) bool false

# If ShadowNinja's `areas` mod is also present with HUD registration feature,
# this label will be displayed anywhere a PvP Control area has been set.
pvp_areas.label (Show PvP area labels) string Defined area.


[*server_shop]

# If currency mod is installed, automatically set up values for minegeld notes.
server_shop.use_currency_defaults (Use currency mod defaults) bool true

# Refunds deposited money when formspec is closed.
server_shop.refund_on_close (Refund on close) bool true


[*slingshot]

# Use old 16x16 textures.
slingshot.old_textures (Old slingshot textures) bool false

# Value of these items will be added to slingshot attack when thrown.
slingshot.ammos (Registered ammos) string default:mese_crystal=5


[*trampoline]

# Percent of damage absorbed when falling on a trampoline. Set to 100 to disable damage.
trampoline.damage_absorb (Trampoline damage absorption) int 100 0 100


[*wlight]

# Enables wlight:megatorch item.
wlight.enable_megatorch (Enable megatorch) bool true


[*wardrobe]

# Number of skins shown per page.
wardrobe.skins_per_page (Skins per page) int 8 1 8

# Show preview images.
wardrobe.previews (Show previews) bool true


[*whitelist]

# Enables/Disables whitelist feature.
whitelist.enable (Enable whitelist) bool false

# Sets a custom message to display when access to server is denied.
whitelist.message (Whitelist message) string This server is whitelisted and you are not on the whitelist.


# ---------------------------------------------------------------------------------

[Modpacks]


[*3D Armor]


[**3d_armor]

armor_material_wood (Enable wood armor) bool true
armor_material_cactus (Enable cactus armor) bool true
armor_material_steel (Enable steel armor) bool true
armor_material_bronze (Enable bronze armor) bool true
armor_material_diamond (Enable diamond armor) bool true
armor_material_gold (Enable gold armor) bool true
armor_material_mithril (Enable mithril armor) bool true
armor_material_crystal (Enable crystal armor) bool true

# Increase this if you get initialization glitches when a player first joins.
armor_init_delay (Initialization delay) int 2

# Number of initialization attempts.
# Use in conjunction with armor_init_delay if initialization problems persist.
armor_init_times (Initialization attempts) int 10

# Increase this if armor is not getting into bones due to server lag.
armor_bones_delay (Delay for bones) int 1

# How often player armor items are updated.
armor_update_time (Armor refresh rate [seconds]) int 1

# Drop armor when a player dies.
# Uses bones mod if present, otherwise items are dropped around the player.
armor_drop (Drop armor on death) bool true

# Pulverize armor when a player dies, overrides armor_drop.
armor_destroy (Pulverize armor on death) bool false

# You can use this to increase or decrease overall armor effectiveness,
# eg: level_multiplier = 0.5 will reduce armor level by half.
armor_level_multiplier (Armor effectiveness multiplier) float 1

# You can use this to increase or decrease overall armor healing,
# eg: armor_heal_multiplier = 0 will disable healing altogether.
armor_heal_multiplier (Armor healing multiplier) float 1

# Armor set item names, remove or add items to include them or remove them from whats considered an Armor set.
armor_set_elements (Armor set items) string head torso legs feet shield

# Bonus multiplier when wearing armor set, set to the same as armor_level_multiplier to disable
armor_set_multiplier (Armor Set Bonus multiplier) float 1.1

# Enable water protection (periodically restores breath when activated).
armor_water_protect (Enable water protection) bool true

# Enable fire protection (defaults true if using ethereal mod).
armor_fire_protect (Enable fire protection) bool false

# Enable fire damage from torches (defaults true if using ethereal mod).
armor_fire_protect_torch (Enable fire protection torch damage) bool false

# Enable punch damage effects.
armor_punch_damage (Enable damage effects) bool true

# Enable migration of old armor inventories.
armor_migrate_old_inventory (Migrate old armor inventories) bool true

# Don't show armor on character model.
armor_transparent (Transparent armor) bool false


[**shields]

shields_disable_sounds (Disable shield sounds) bool false


[**technic_armor]

# Enable or disable technic_armor.
armor_enable_technic (Enable technic armor) bool true


[**wieldview]

# Set number of seconds between visible wielded item updates.
wieldview_update_time (Wieldview refresh rate [seconds]) int 2

# Show nodes as tiles, disabled by default.
wieldview_node_tiles (Show nodes as tiles) bool false


[*Castle]


[**castle_masonry]

[***Materials]
castle_masonry_stonewall (Stonewall) bool true
castle_masonry_cobble (Cobble) bool true
castle_masonry_stonebrick (Stone Brick) bool true
castle_masonry_sandstonebrick (Sandstone Brick) bool true
castle_masonry_desertstonebrick (Desert Stone Brick) bool true
castle_masonry_stone (Stone) bool true
castle_masonry_sandstone (Sandstone) bool true
castle_masonry_desertstone (Desert Stone) bool true
castle_masonry_wood (Wood) bool false
castle_masonry_ice (Ice) bool false
castle_masonry_snow (Snow) bool false
castle_masonry_obsidianbrick (Obsidian Brick) bool false

[***Forms]
castle_masonry_pillar (Pillars) bool true
castle_masonry_arrowslit (Arrow slits) bool true
castle_masonry_murderhole (Murder holes and machicolations) bool true


[**crafting_bench]

# The number of seconds between each operation of the crafting bench.
crafting_bench_crafting_rate (Crafting rate) int 5 1 60


[*Mesecons]

[**mesecons]

mesecon.resumetime (Startup delay) int 4 1 10

# The value at which circuits will overheat.
mesecon.overheat_max (Device heat limit) int 20 1 100

mesecon.cooldown_time (Device cooldown time) float 2.0 0.1 10.0
mesecon.cooldown_granularity (Cooldown step length) float 0.5 0.0 1.0


[**mesecons_blinkyplant]

mesecon.blinky_plant_interval (Plant blinking interval) int 3 1 5


[**mesecons_detector]

mesecon.detector_radius (Player detector scanning radius) int 6 3 16
mesecon.node_detector_distance_max (Node detector distance limit) int 10 1 16


[**mesecons_luacontroller]

mesecon.luacontroller_string_rep_max (string:rep result length limit) int 64000 1000 1000000
mesecon.luacontroller_digiline_maxlen (Digiline message size limit) int 50000 1000 1000000
mesecon.luacontroller_maxevents (Controller execution time limit) int 10000 1000 100000
mesecon.luacontroller_memsize (Controller memory limit) int 100000 10000 1000000


[**mesecons_movestones]

mesecon.movestone_speed (Speed) int 3 1 10
mesecon.movestone_max_push (Max push) int 50 1 100
mesecon.movestone_max_pull (Max pull) int 50 1 100


[**mesecons_pistons]

mesecon.piston_max_push (Max push) int 15 1 100
mesecon.piston_max_pull (Max pull) int 15 1 100


[**mesecons_pressureplates]

mesecon.pplate_interval (Check interval) float 0.1 0.1 1.0


[*Minetest Game]

[**beds]

# If enabled, players respawn at the bed they last lay on instead of normal
# spawn.
# This setting is only read at startup.
enable_bed_respawn (Respawn at bed) bool true

# If enabled, the night can be skipped if more than half of the players are
# in beds.
enable_bed_night_skip (Skip night when sleeping) bool true

# If enabled with 'enable_bed_night_skip', allows any single player in bed
# to skip night.
enable_single_night_skip (Skip night if any player in bed) bool false

[**bones]

# Manages how item loss is handled when a player dies.
#
# Modes supported:
# | ■ bones:
# |     ● Bones containing player's inventory contents are
# |       placed where/near player died.
# | ■ drop:
# |     ● Inventory contents are dropped on the ground.
# | ■ keep:
# |     ● Player does not lose items at death.
bones_mode (Bones mode) enum bones bones,drop,keep

# The time in seconds after which the bones of a dead player can be looted
# by everyone.
#
# Setting this to 0 will disable sharing of bones completely.
share_bones_time (Bones share time) int 1200 0

# How much earlier the bones of a dead player can be looted by everyone if
# the player dies in a protected area they don't own.
#
# 0 to disable. Default is "share_bones_time" divide by four (300).
share_bones_time_early (Bones early share time) int 300 0

[**creative]

# In creative mode players are able to dig all kind of blocks nearly
# instantly, and have access to unlimited resources.
#
# Some of the functionality is only available if this setting is present
# at startup.
creative_mode (Creative mode) bool false

[**default]

# If enabled, lava will "cool" & turn into stone & obsidian when touching
# water.
enable_lavacooling (Lavacooling) bool true

[**fire]

# Flammable nodes will be ignited by nearby igniters. Spreading fire may
# cause severe destruction.
# Spreading fire nodes will disappear when fire is disabled, but
# 'permanent_flame' nodes are unaffected.
enable_fire (Fire) bool true

# Opposite of (& overridden by) 'enable_fire'.
disable_fire (Disable fire) bool false

# Enable flame sound.
flame_sound (Flame sound) bool true

[**give_initial_stuff]

# If enabled, items defined in 'initial_stuff' setting will be given
# to players.
give_initial_stuff (Give initial items) bool false

# Defines what items new players will start with if 'give_initial_stuff' setting
# is enabled.
#
# Comma-separated list: item1,item2 10,item3
initial_stuff (Initial items) string default:sword_stone,default:pick_steel,default:apple 10

[**stairs]

[***Advanced]

# Replaces old stairs with new ones (Only required for older worlds).
enable_stairs_replace_abm (Replace old stairs) bool false

[**tnt]

# When TNT explodes, it destroys nearby nodes and damages nearby players.
#
# NOTE: This setting is disabled by default on servers.
enable_tnt (TNT) bool true

# The radius in which nodes will be destroyed by a TNT explosion.
tnt_radius (TNT radius) int 3 0


[*More Mesecons]

[**moremesecons_adjustable_blinkyplant]

# Minimal interval authorized. Any lower will be set to it.
moremesecons_adjustable_blinky_plant.min_interval (Minimum interval) float 0.5

[**moremesecons_commandblock]

# Space-separated list of authorized commands (empty to authorize all).
moremesecons_commandblock.authorized_commands (Authorized commands) string tell

# Any value less than or equal to 0 will be changed to 1 and a NaN value will be changed to the default value.
moremesecons_commandblock.nearest_max_distance (Nearest player maximum distance) float 8

[**moremesecons_jammer]

# Any value less than or equal to 0 will be changed to 1 and a NaN value will be changed to the default value.
moremesecons_jammer.max_distance (Jammer action range) float 10

# The registration LBM will recover the jammer database if the moremesecons_jammer
# mod storage has been removed, and will create that mod storage after an update
# from an older version which did not use it.
moremesecons_jammer.enable_lbm (Enable Jammer registration LBM) bool false

[**moremesecons_playerkiller]

# Any value less than or equal to 0 will be changed to 1 and a NaN value will be changed to the default value.
moremesecons_playerkiller.max_distance (Player Killer action range) float 8

[**moremesecons_sayer]

# It will work only if:
# * moremesecons_sayer is present in your trusted_mods setting
# * you are playing in singleplayer
# * the speech-dispatcher is installed on your system
# * you are using a POSIX-compliant system and a sh-compatible shell (such as bash, dash, zsh...)
moremesecons_sayer.use_speech_dispatcher (Use Speech Dispatcher) bool true

# Any value less than or equal to 0 will be changed to 1 and a NaN value will be changed to the default value.
moremesecons_sayer.max_distance (Sayer range) float 8

[**moremesecons_teleporter]

# Any value less than or equal to 0 will be changed to 1 and a NaN value will be changed to the default value.
moremesecons_teleporter.max_t2t_distance (Maximum teleporter-to-teleporter distance) float 50

# Any value less than or equal to 0 will be set to 1
moremesecons_teleporter.max_p2t_distance (Maximum player-to-teleporter distance) float 25

# The registration LBM will recover a teleporter network if the moremesecons_teleporter
# mod storage has been removed, and will create that mod storage after an update
# from an older version which did not use it.
moremesecons_teleporter.enable_lbm (Enable Teleporter registration LBM) bool false

[**moremesecons_wireless]

# Whether to enable the wireless jammer node
moremesecons_wireless.enable_jammer (Enable wireless jammer) bool true

# Any value less than or equal to 0 will be changed to 1 and a NaN value will be changed to the default value.
moremesecons_wireless.jammer_max_distance (Wireless Jammer action range) float 15

# The registration LBM will recover a wireless network if the moremesecons_wireless
# mod storage has been removed, and will create that mod storage after an update
# from an older version which did not use it.
moremesecons_wireless.enable_lbm (Enable Wireless registration LBM) bool false

# This file contains settings of Antum game that can be changed in
# minetest.conf


# ---------------------------------------------------------------------------------

[Built-in]

[*General]

#    Name of the player.
#    When running a server, clients connecting with this name are admins.
#    When starting from the main menu, this is overridden.
name (Player name) string

# Set the language. Leave empty to use the system language.
# A restart is required after changing this.
language (Language) enum   ,ar,ca,cs,da,de,dv,el,en,eo,es,et,eu,fil,fr,hu,id,it,ja,ja_KS,jbo,kk,kn,lo,lt,ms,my,nb,nl,nn,pl,pt,pt_BR,ro,ru,sl,sr_Cyrl,sv,sw,th,tr,uk,vi

#    Level of logging to be written to debug.txt:
#    -    <nothing> (no logging)
#    -    none (messages with no level)
#    -    error
#    -    warning
#    -    action
#    -    info
#    -    verbose
debug_log_level (Debug log level) enum action ,none,error,warning,action,info,verbose

#    If the file size of debug.txt exceeds the number of megabytes specified in
#    this setting when it is opened, the file is moved to debug.txt.1,
#    deleting an older debug.txt.1 if it exists.
#    debug.txt is only moved if this setting is positive.
debug_log_size_max (Debug log file size threshold) int 50

#    Minimal level of logging to be written to chat.
chat_log_level (Chat log level) enum error ,none,error,warning,action,info,verbose

#    Enable IPv6 support (for both client and server).
#    Required for IPv6 connections to work at all.
enable_ipv6 (IPv6) bool true

# Defines the maximal player transfer distance in blocks (0 = unlimited).
player_transfer_distance (Player transfer distance) int 0

# If enabled, you can place blocks at the position (feet + eye level) where you stand.
# This is helpful when working with nodeboxes in small areas.
enable_build_where_you_stand (Build inside player) bool false

# Player is able to fly without being affected by gravity.
# This requires the "fly" privilege on the server.
free_move (Flying) bool false

# If enabled, makes move directions relative to the player's pitch when flying or swimming.
pitch_move (Pitch move mode) bool false

# Fast movement (via the "special" key).
# This requires the "fast" privilege on the server.
fast_move (Fast movement) bool false

# If enabled together with fly mode, player is able to fly through solid nodes.
# This requires the "noclip" privilege on the server.
noclip (Noclip) bool false


[**Advanced]

#    Print the engine's profiling data in regular intervals (in seconds).
#    0 = disable. Useful for developers.
profiler_print_interval (Engine profiling data print interval) int 0


[*Game]

#    Default game when creating a new world.
#    This will be overridden when creating a world from the main menu.
default_game (Default game) string antum

#    Message of the day displayed to players connecting.
motd (Message of the day) string

#    Maximum number of players that can be connected simultaneously.
max_users (Maximum users) int 15

#    World directory (everything in the world is stored here).
#    Not needed if starting from the main menu.
map-dir (Map directory) path

#    Time in seconds for item entity (dropped items) to live.
#    Setting it to -1 disables the feature.
item_entity_ttl (Item entity TTL) int 900

#    Specifies the default stack size of nodes, items and tools.
#    Note that mods or games may explicitly set a stack for certain (or all) items.
default_stack_max (Default stack size) int 99

#    Enable players getting damage and dying.
enable_damage (Damage) bool false

#    Enable creative mode for all players
creative_mode (Creative) bool false

#    A chosen map seed for a new map, leave empty for random.
#    Will be overridden when creating a new world in the main menu.
fixed_map_seed (Fixed map seed) string

#    New users need to input this password.
default_password (Default password) string

#    The privileges that new users automatically get.
#    See /privs in game for a full list on your server and mod configuration.
default_privs (Default privileges) string interact, shout

#    Privileges that players with basic_privs can grant
basic_privs (Basic privileges) string interact, shout

#    Whether players are shown to clients without any range limit.
#    Deprecated, use the setting player_transfer_distance instead.
unlimited_player_transfer_distance (Unlimited player transfer distance) bool true

#    Defines the maximal player transfer distance in blocks (0 = unlimited).
player_transfer_distance (Player transfer distance) int 0

#    Whether to allow players to damage and kill each other.
enable_pvp (Player versus player) bool true

#    Enable mod channels support.
enable_mod_channels (Mod channels) bool false

#    If this is set, players will always (re)spawn at the given position.
static_spawnpoint (Static spawnpoint) string

#    If enabled, new players cannot join with an empty password.
disallow_empty_password (Disallow empty passwords) bool false

#    If enabled, disable cheat prevention in multiplayer.
disable_anticheat (Disable anticheat) bool false

#    If enabled, actions are recorded for rollback.
#    This option is only read when server starts.
enable_rollback_recording (Rollback recording) bool false

#    Format of player chat messages. The following strings are valid placeholders:
#    @name, @message, @timestamp (optional)
chat_message_format (Chat message format) string <@name> @message

#    A message to be displayed to all clients when the server shuts down.
kick_msg_shutdown (Shutdown message) string Server shutting down.

#    A message to be displayed to all clients when the server crashes.
kick_msg_crash (Crash message) string This server has experienced an internal error. You will now be disconnected.

#    Whether to ask clients to reconnect after a (Lua) crash.
#    Set this to true if your server is set up to restart automatically.
ask_reconnect_on_crash (Ask to reconnect after crash) bool false

#    From how far clients know about objects, stated in mapblocks (16 nodes).
#
#    Setting this larger than active_block_range will also cause the server
#    to maintain active objects up to this distance in the direction the
#    player is looking. (This can avoid mobs suddenly disappearing from view)
active_object_send_range_blocks (Active object send range) int 8

#    The radius of the volume of blocks around every player that is subject to the
#    active block stuff, stated in mapblocks (16 nodes).
#    In active blocks objects are loaded and ABMs run.
#    This is also the minimum range in which active objects (mobs) are maintained.
#    This should be configured together with active_object_send_range_blocks.
active_block_range (Active block range) int 4

#    From how far blocks are sent to clients, stated in mapblocks (16 nodes).
max_block_send_distance (Max block send distance) int 12

#    Maximum number of forceloaded mapblocks.
max_forceloaded_blocks (Maximum forceloaded blocks) int 16

#    Interval of sending time of day to clients.
time_send_interval (Time send interval) int 5

#    Controls length of day/night cycle.
#    Examples:
#    72 = 20min, 360 = 4min, 1 = 24hour, 0 = day/night/whatever stays unchanged.
time_speed (Time speed) int 72

#    Time of day when a new world is started, in millihours (0-23999).
world_start_time (World start time) int 6125 0 23999

#    Interval of saving important changes in the world, stated in seconds.
server_map_save_interval (Map save interval) float 5.3

#    Set the maximum character length of a chat message sent by clients.
chat_message_max_size (Chat message max length) int 500

#    Amount of messages a player may send per 10 seconds.
chat_message_limit_per_10sec (Chat message count limit) float 10.0

#    Kick players who sent more than X messages per 10 seconds.
chat_message_limit_trigger_kick (Chat message kick threshold) int 50


[**Physics]

#    Horizontal and vertical acceleration on ground or when climbing,
#    in nodes per second per second.
movement_acceleration_default (Default acceleration) float 3

#    Horizontal acceleration in air when jumping or falling,
#    in nodes per second per second.
movement_acceleration_air (Acceleration in air) float 2

#    Horizontal and vertical acceleration in fast mode,
#    in nodes per second per second.
movement_acceleration_fast (Fast mode acceleration) float 10

#    Walking and flying speed, in nodes per second.
movement_speed_walk (Walking speed) float 4

#    Sneaking speed, in nodes per second.
movement_speed_crouch (Sneaking speed) float 1.35

#    Walking, flying and climbing speed in fast mode, in nodes per second.
movement_speed_fast (Fast mode speed) float 20

#    Vertical climbing speed, in nodes per second.
movement_speed_climb (Climbing speed) float 3

#    Initial vertical speed when jumping, in nodes per second.
movement_speed_jump (Jumping speed) float 6.5

#    Decrease this to increase liquid resistance to movement.
movement_liquid_fluidity (Liquid fluidity) float 1

#    Maximum liquid resistance. Controls deceleration when entering liquid at
#    high speed.
movement_liquid_fluidity_smooth (Liquid fluidity smoothing) float 0.5

#    Controls sinking speed in liquid.
movement_liquid_sink (Liquid sinking) float 10

#    Acceleration of gravity, in nodes per second per second.
movement_gravity (Gravity) float 9.81


[**Advanced]

#    Handling for deprecated Lua API calls:
#    -    none: Do not log deprecated calls
#    -    log: mimic and log backtrace of deprecated call (default).
#    -    error: abort on usage of deprecated call (suggested for mod developers).
deprecated_lua_api_handling (Deprecated Lua API handling) enum log none,log,error

#    Number of extra blocks that can be loaded by /clearobjects at once.
#    This is a trade-off between sqlite transaction overhead and
#    memory consumption (4096=100MB, as a rule of thumb).
max_clearobjects_extra_loaded_blocks (Max. clearobjects extra blocks) int 4096

#    How much the server will wait before unloading unused mapblocks.
#    Higher value is smoother, but will use more RAM.
server_unload_unused_data_timeout (Unload unused server data) int 29

#    Maximum number of statically stored objects in a block.
max_objects_per_block (Maximum objects per block) int 64

#    See https://www.sqlite.org/pragma.html#pragma_synchronous
sqlite_synchronous (Synchronous SQLite) enum 2 0,1,2

#    ZLib compression level to use when saving mapblocks to disk.
#    -1 - Zlib's default compression level
#     0 - no compresson, fastest
#     9 - best compression, slowest
#     (levels 1-3 use Zlib's "fast" method, 4-9 use the normal method)
map_compression_level_disk (Map Compression Level for Disk Storage) int 3 -1 9

#    Length of a server tick and the interval at which objects are generally updated over
#    network.
dedicated_server_step (Dedicated server step) float 0.09

#    Length of time between active block management cycles
active_block_mgmt_interval (Active block management interval) float 2.0

#    Length of time between Active Block Modifier (ABM) execution cycles
abm_interval (ABM interval) float 1.0

#    The time budget allowed for ABMs to execute on each step
#    (as a fraction of the ABM Interval)
abm_time_budget (ABM time budget) float 0.2 0.1 0.9

#    Length of time between NodeTimer execution cycles
nodetimer_interval (NodeTimer interval) float 0.2

#    If enabled, invalid world data won't cause the server to shut down.
#    Only enable this if you know what you are doing.
ignore_world_load_errors (Ignore world errors) bool false

#    Max liquids processed per step.
liquid_loop_max (Liquid loop max) int 100000

#    The time (in seconds) that the liquids queue may grow beyond processing
#    capacity until an attempt is made to decrease its size by dumping old queue
#    items.  A value of 0 disables the functionality.
liquid_queue_purge_time (Liquid queue purge time) int 0

#    Liquid update interval in seconds.
liquid_update (Liquid update tick) float 1.0

#    At this distance the server will aggressively optimize which blocks are sent to
#    clients.
#    Small values potentially improve performance a lot, at the expense of visible
#    rendering glitches (some blocks will not be rendered under water and in caves,
#    as well as sometimes on land).
#    Setting this to a value greater than max_block_send_distance disables this
#    optimization.
#    Stated in mapblocks (16 nodes).
block_send_optimize_distance (Block send optimize distance) int 4 2

#    If enabled the server will perform map block occlusion culling based on
#    on the eye position of the player. This can reduce the number of blocks
#    sent to the client 50-80%. The client will not longer receive most invisible
#    so that the utility of noclip mode is reduced.
server_side_occlusion_culling (Server side occlusion culling) bool true

#    Restricts the access of certain client-side functions on servers.
#    Combine the byteflags below to restrict client-side features, or set to 0
#    for no restrictions:
#    LOAD_CLIENT_MODS: 1 (disable loading client-provided mods)
#    CHAT_MESSAGES: 2 (disable send_chat_message call client-side)
#    READ_ITEMDEFS: 4 (disable get_item_def call client-side)
#    READ_NODEDEFS: 8 (disable get_node_def call client-side)
#    LOOKUP_NODES_LIMIT: 16 (limits get_node call client-side to
#    csm_restriction_noderange)
#    READ_PLAYERINFO: 32 (disable get_player_names call client-side)
csm_restriction_flags (Client side modding restrictions) int 62

#   If the CSM restriction for node range is enabled, get_node calls are limited
#   to this distance from the player to the node.
csm_restriction_noderange (Client side node lookup range restriction) int 0


[*Mapgen]

#    Name of map generator to be used when creating a new world.
#    Creating a world in the main menu will override this.
#    Current mapgens in a highly unstable state:
#    -    The optional floatlands of v7 (disabled by default).
mg_name (Mapgen name) enum v7 v7,valleys,carpathian,v5,flat,fractal,singlenode,v6

#    Water surface level of the world.
water_level (Water level) int 1

#    From how far blocks are generated for clients, stated in mapblocks (16 nodes).
max_block_generate_distance (Max block generate distance) int 10

#    Limit of map generation, in nodes, in all 6 directions from (0, 0, 0).
#    Only mapchunks completely within the mapgen limit are generated.
#    Value is stored per-world.
mapgen_limit (Map generation limit) int 31000 0 31000

#    Global map generation attributes.
#    In Mapgen v6 the 'decorations' flag controls all decorations except trees
#    and junglegrass, in all other mapgens this flag controls all decorations.
mg_flags (Mapgen flags) flags caves,dungeons,light,decorations,biomes,ores caves,dungeons,light,decorations,biomes,ores,nocaves,nodungeons,nolight,nodecorations,nobiomes,noores


[**Biome API temperature and humidity noise parameters]

#    Temperature variation for biomes.
mg_biome_np_heat (Heat noise) noise_params_2d 50, 50, (1000, 1000, 1000), 5349, 3, 0.5, 2.0, eased

#    Small-scale temperature variation for blending biomes on borders.
mg_biome_np_heat_blend (Heat blend noise) noise_params_2d 0, 1.5, (8, 8, 8), 13, 2, 1.0, 2.0, eased

#    Humidity variation for biomes.
mg_biome_np_humidity (Humidity noise) noise_params_2d 50, 50, (1000, 1000, 1000), 842, 3, 0.5, 2.0, eased

#    Small-scale humidity variation for blending biomes on borders.
mg_biome_np_humidity_blend (Humidity blend noise) noise_params_2d 0, 1.5, (8, 8, 8), 90003, 2, 1.0, 2.0, eased


[**Mapgen V5]

#    Map generation attributes specific to Mapgen v5.
mgv5_spflags (Mapgen V5 specific flags) flags caverns caverns,nocaverns

#    Controls width of tunnels, a smaller value creates wider tunnels.
#    Value >= 10.0 completely disables generation of tunnels and avoids the
#    intensive noise calculations.
mgv5_cave_width (Cave width) float 0.09

#    Y of upper limit of large caves.
mgv5_large_cave_depth (Large cave depth) int -256

#    Minimum limit of random number of small caves per mapchunk.
mgv5_small_cave_num_min (Small cave minimum number) int 0 0 256

#    Maximum limit of random number of small caves per mapchunk.
mgv5_small_cave_num_max (Small cave maximum number) int 0 0 256

#    Minimum limit of random number of large caves per mapchunk.
mgv5_large_cave_num_min (Large cave minimum number) int 0 0 64

#    Maximum limit of random number of large caves per mapchunk.
mgv5_large_cave_num_max (Large cave maximum number) int 2 0 64

#    Proportion of large caves that contain liquid.
mgv5_large_cave_flooded (Large cave proportion flooded) float 0.5 0.0 1.0

#    Y-level of cavern upper limit.
mgv5_cavern_limit (Cavern limit) int -256

#    Y-distance over which caverns expand to full size.
mgv5_cavern_taper (Cavern taper) int 256

#    Defines full size of caverns, smaller values create larger caverns.
mgv5_cavern_threshold (Cavern threshold) float 0.7

#    Lower Y limit of dungeons.
mgv5_dungeon_ymin (Dungeon minimum Y) int -31000

#    Upper Y limit of dungeons.
mgv5_dungeon_ymax (Dungeon maximum Y) int 31000


[***Noises]

#    Variation of biome filler depth.
mgv5_np_filler_depth (Filler depth noise) noise_params_2d 0, 1, (150, 150, 150), 261, 4, 0.7, 2.0, eased

#    Variation of terrain vertical scale.
#    When noise is < -0.55 terrain is near-flat.
mgv5_np_factor (Factor noise) noise_params_2d 0, 1, (250, 250, 250), 920381, 3, 0.45, 2.0, eased

#    Y-level of average terrain surface.
mgv5_np_height (Height noise) noise_params_2d 0, 10, (250, 250, 250), 84174, 4, 0.5, 2.0, eased

#    First of two 3D noises that together define tunnels.
mgv5_np_cave1 (Cave1 noise) noise_params_3d 0, 12, (61, 61, 61), 52534, 3, 0.5, 2.0

#    Second of two 3D noises that together define tunnels.
mgv5_np_cave2 (Cave2 noise) noise_params_3d 0, 12, (67, 67, 67), 10325, 3, 0.5, 2.0

#    3D noise defining giant caverns.
mgv5_np_cavern (Cavern noise) noise_params_3d 0, 1, (384, 128, 384), 723, 5, 0.63, 2.0

#    3D noise defining terrain.
mgv5_np_ground (Ground noise) noise_params_3d 0, 40, (80, 80, 80), 983240, 4, 0.55, 2.0, eased

#    3D noise that determines number of dungeons per mapchunk.
mgv5_np_dungeons (Dungeon noise) noise_params_3d 0.9, 0.5, (500, 500, 500), 0, 2, 0.8, 2.0


[**Mapgen V6]

#    Map generation attributes specific to Mapgen v6.
#    The 'snowbiomes' flag enables the new 5 biome system.
#    When the 'snowbiomes' flag is enabled jungles are automatically enabled and
#    the 'jungles' flag is ignored.
mgv6_spflags (Mapgen V6 specific flags) flags jungles,biomeblend,mudflow,snowbiomes,noflat,trees jungles,biomeblend,mudflow,snowbiomes,flat,trees,nojungles,nobiomeblend,nomudflow,nosnowbiomes,noflat,notrees

#    Deserts occur when np_biome exceeds this value.
#    When the 'snowbiomes' flag is enabled, this is ignored.
mgv6_freq_desert (Desert noise threshold) float 0.45

#    Sandy beaches occur when np_beach exceeds this value.
mgv6_freq_beach (Beach noise threshold) float 0.15

#    Lower Y limit of dungeons.
mgv6_dungeon_ymin (Dungeon minimum Y) int -31000

#    Upper Y limit of dungeons.
mgv6_dungeon_ymax (Dungeon maximum Y) int 31000


[***Noises]

#    Y-level of lower terrain and seabed.
mgv6_np_terrain_base (Terrain base noise) noise_params_2d -4, 20, (250, 250, 250), 82341, 5, 0.6, 2.0, eased

#    Y-level of higher terrain that creates cliffs.
mgv6_np_terrain_higher (Terrain higher noise) noise_params_2d 20, 16, (500, 500, 500), 85039, 5, 0.6, 2.0, eased

#    Varies steepness of cliffs.
mgv6_np_steepness (Steepness noise) noise_params_2d 0.85, 0.5, (125, 125, 125), -932, 5, 0.7, 2.0, eased

#    Defines distribution of higher terrain.
mgv6_np_height_select (Height select noise) noise_params_2d 0.5, 1, (250, 250, 250), 4213, 5, 0.69, 2.0, eased

#    Varies depth of biome surface nodes.
mgv6_np_mud (Mud noise) noise_params_2d 4, 2, (200, 200, 200), 91013, 3, 0.55, 2.0, eased

#    Defines areas with sandy beaches.
mgv6_np_beach (Beach noise) noise_params_2d 0, 1, (250, 250, 250), 59420, 3, 0.50, 2.0, eased

#    Temperature variation for biomes.
mgv6_np_biome (Biome noise) noise_params_2d 0, 1, (500, 500, 500), 9130, 3, 0.50, 2.0, eased

#    Variation of number of caves.
mgv6_np_cave (Cave noise) noise_params_2d 6, 6, (250, 250, 250), 34329, 3, 0.50, 2.0, eased

#    Humidity variation for biomes.
mgv6_np_humidity (Humidity noise) noise_params_2d 0.5, 0.5, (500, 500, 500), 72384, 3, 0.50, 2.0, eased

#    Defines tree areas and tree density.
mgv6_np_trees (Trees noise) noise_params_2d 0, 1, (125, 125, 125), 2, 4, 0.66, 2.0, eased

#    Defines areas where trees have apples.
mgv6_np_apple_trees (Apple trees noise) noise_params_2d 0, 1, (100, 100, 100), 342902, 3, 0.45, 2.0, eased


[**Mapgen V7]

#    Map generation attributes specific to Mapgen v7.
#    'ridges': Rivers.
#    'floatlands': Floating land masses in the atmosphere.
#    'caverns': Giant caves deep underground.
mgv7_spflags (Mapgen V7 specific flags) flags mountains,ridges,nofloatlands,caverns mountains,ridges,floatlands,caverns,nomountains,noridges,nofloatlands,nocaverns

#    Y of mountain density gradient zero level. Used to shift mountains vertically.
mgv7_mount_zero_level (Mountain zero level) int 0

#    Lower Y limit of floatlands.
mgv7_floatland_ymin (Floatland minimum Y) int 1024

#    Upper Y limit of floatlands.
mgv7_floatland_ymax (Floatland maximum Y) int 4096

#    Y-distance over which floatlands taper from full density to nothing.
#    Tapering starts at this distance from the Y limit.
#    For a solid floatland layer, this controls the height of hills/mountains.
#    Must be less than or equal to half the distance between the Y limits.
mgv7_floatland_taper (Floatland tapering distance) int 256

#    Exponent of the floatland tapering. Alters the tapering behaviour.
#    Value = 1.0 creates a uniform, linear tapering.
#    Values > 1.0 create a smooth tapering suitable for the default separated
#    floatlands.
#    Values < 1.0 (for example 0.25) create a more defined surface level with
#    flatter lowlands, suitable for a solid floatland layer.
mgv7_float_taper_exp (Floatland taper exponent) float 2.0

#    Adjusts the density of the floatland layer.
#    Increase value to increase density. Can be positive or negative.
#    Value = 0.0: 50% of volume is floatland.
#    Value = 2.0 (can be higher depending on 'mgv7_np_floatland', always test
#    to be sure) creates a solid floatland layer.
mgv7_floatland_density (Floatland density) float -0.6

#    Surface level of optional water placed on a solid floatland layer.
#    Water is disabled by default and will only be placed if this value is set
#    to above 'mgv7_floatland_ymax' - 'mgv7_floatland_taper' (the start of the
#    upper tapering).
#    ***WARNING, POTENTIAL DANGER TO WORLDS AND SERVER PERFORMANCE***:
#    When enabling water placement the floatlands must be configured and tested
#    to be a solid layer by setting 'mgv7_floatland_density' to 2.0 (or other
#    required value depending on 'mgv7_np_floatland'), to avoid
#    server-intensive extreme water flow and to avoid vast flooding of the
#    world surface below.
mgv7_floatland_ywater (Floatland water level) int -31000

#    Controls width of tunnels, a smaller value creates wider tunnels.
#    Value >= 10.0 completely disables generation of tunnels and avoids the
#    intensive noise calculations.
mgv7_cave_width (Cave width) float 0.09

#    Y of upper limit of large caves.
mgv7_large_cave_depth (Large cave depth) int -33

#    Minimum limit of random number of small caves per mapchunk.
mgv7_small_cave_num_min (Small cave minimum number) int 0 0 256

#    Maximum limit of random number of small caves per mapchunk.
mgv7_small_cave_num_max (Small cave maximum number) int 0 0 256

#    Minimum limit of random number of large caves per mapchunk.
mgv7_large_cave_num_min (Large cave minimum number) int 0 0 64

#    Maximum limit of random number of large caves per mapchunk.
mgv7_large_cave_num_max (Large cave maximum number) int 2 0 64

#    Proportion of large caves that contain liquid.
mgv7_large_cave_flooded (Large cave proportion flooded) float 0.5 0.0 1.0

#    Y-level of cavern upper limit.
mgv7_cavern_limit (Cavern limit) int -256

#    Y-distance over which caverns expand to full size.
mgv7_cavern_taper (Cavern taper) int 256

#    Defines full size of caverns, smaller values create larger caverns.
mgv7_cavern_threshold (Cavern threshold) float 0.7

#    Lower Y limit of dungeons.
mgv7_dungeon_ymin (Dungeon minimum Y) int -31000

#    Upper Y limit of dungeons.
mgv7_dungeon_ymax (Dungeon maximum Y) int 31000


[***Noises]

#    Y-level of higher terrain that creates cliffs.
mgv7_np_terrain_base (Terrain base noise) noise_params_2d 4, 70, (600, 600, 600), 82341, 5, 0.6, 2.0, eased

#    Y-level of lower terrain and seabed.
mgv7_np_terrain_alt (Terrain alternative noise) noise_params_2d 4, 25, (600, 600, 600), 5934, 5, 0.6, 2.0, eased

#    Varies roughness of terrain.
#    Defines the 'persistence' value for terrain_base and terrain_alt noises.
mgv7_np_terrain_persist (Terrain persistence noise) noise_params_2d 0.6, 0.1, (2000, 2000, 2000), 539, 3, 0.6, 2.0, eased

#    Defines distribution of higher terrain and steepness of cliffs.
mgv7_np_height_select (Height select noise) noise_params_2d -8, 16, (500, 500, 500), 4213, 6, 0.7, 2.0, eased

#    Variation of biome filler depth.
mgv7_np_filler_depth (Filler depth noise) noise_params_2d 0, 1.2, (150, 150, 150), 261, 3, 0.7, 2.0, eased

#    Variation of maximum mountain height (in nodes).
mgv7_np_mount_height (Mountain height noise) noise_params_2d 256, 112, (1000, 1000, 1000), 72449, 3, 0.6, 2.0, eased

#    Defines large-scale river channel structure.
mgv7_np_ridge_uwater (Ridge underwater noise) noise_params_2d 0, 1, (1000, 1000, 1000), 85039, 5, 0.6, 2.0, eased

#    3D noise defining mountain structure and height.
#    Also defines structure of floatland mountain terrain.
mgv7_np_mountain (Mountain noise) noise_params_3d -0.6, 1, (250, 350, 250), 5333, 5, 0.63, 2.0

#    3D noise defining structure of river canyon walls.
mgv7_np_ridge (Ridge noise) noise_params_3d 0, 1, (100, 100, 100), 6467, 4, 0.75, 2.0

#    3D noise defining structure of floatlands.
#    If altered from the default, the noise 'scale' (0.7 by default) may need
#    to be adjusted, as floatland tapering functions best when this noise has
#    a value range of approximately -2.0 to 2.0.
mgv7_np_floatland (Floatland noise) noise_params_3d 0, 0.7, (384, 96, 384), 1009, 4, 0.75, 1.618

#    3D noise defining giant caverns.
mgv7_np_cavern (Cavern noise) noise_params_3d 0, 1, (384, 128, 384), 723, 5, 0.63, 2.0

#    First of two 3D noises that together define tunnels.
mgv7_np_cave1 (Cave1 noise) noise_params_3d 0, 12, (61, 61, 61), 52534, 3, 0.5, 2.0

#    Second of two 3D noises that together define tunnels.
mgv7_np_cave2 (Cave2 noise) noise_params_3d 0, 12, (67, 67, 67), 10325, 3, 0.5, 2.0

#    3D noise that determines number of dungeons per mapchunk.
mgv7_np_dungeons (Dungeon noise) noise_params_3d 0.9, 0.5, (500, 500, 500), 0, 2, 0.8, 2.0


[**Mapgen Carpathian]

#    Map generation attributes specific to Mapgen Carpathian.
mgcarpathian_spflags (Mapgen Carpathian specific flags) flags caverns,norivers caverns,rivers,nocaverns,norivers

#    Defines the base ground level.
mgcarpathian_base_level (Base ground level) float 12.0

#    Defines the width of the river channel.
mgcarpathian_river_width (River channel width) float 0.05

#    Defines the depth of the river channel.
mgcarpathian_river_depth (River channel depth) float 24.0

#    Defines the width of the river valley.
mgcarpathian_valley_width (River valley width) float 0.25

#    Controls width of tunnels, a smaller value creates wider tunnels.
#    Value >= 10.0 completely disables generation of tunnels and avoids the
#    intensive noise calculations.
mgcarpathian_cave_width (Cave width) float 0.09

#    Y of upper limit of large caves.
mgcarpathian_large_cave_depth (Large cave depth) int -33

#    Minimum limit of random number of small caves per mapchunk.
mgcarpathian_small_cave_num_min (Small cave minimum number) int 0 0 256

#    Maximum limit of random number of small caves per mapchunk.
mgcarpathian_small_cave_num_max (Small cave maximum number) int 0 0 256

#    Minimum limit of random number of large caves per mapchunk.
mgcarpathian_large_cave_num_min (Large cave minimum number) int 0 0 64

#    Maximum limit of random number of large caves per mapchunk.
mgcarpathian_large_cave_num_max (Large cave maximum number) int 2 0 64

#    Proportion of large caves that contain liquid.
mgcarpathian_large_cave_flooded (Large cave proportion flooded) float 0.5 0.0 1.0

#    Y-level of cavern upper limit.
mgcarpathian_cavern_limit (Cavern limit) int -256

#    Y-distance over which caverns expand to full size.
mgcarpathian_cavern_taper (Cavern taper) int 256

#    Defines full size of caverns, smaller values create larger caverns.
mgcarpathian_cavern_threshold (Cavern threshold) float 0.7

#    Lower Y limit of dungeons.
mgcarpathian_dungeon_ymin (Dungeon minimum Y) int -31000

#    Upper Y limit of dungeons.
mgcarpathian_dungeon_ymax (Dungeon maximum Y) int 31000


[***Noises]

#    Variation of biome filler depth.
mgcarpathian_np_filler_depth (Filler depth noise) noise_params_2d 0, 1, (128, 128, 128), 261, 3, 0.7, 2.0, eased

#    First of 4 2D noises that together define hill/mountain range height.
mgcarpathian_np_height1 (Hilliness1 noise) noise_params_2d 0, 5, (251, 251, 251), 9613, 5, 0.5, 2.0, eased

#    Second of 4 2D noises that together define hill/mountain range height.
mgcarpathian_np_height2 (Hilliness2 noise) noise_params_2d 0, 5, (383, 383, 383), 1949, 5, 0.5, 2.0, eased

#    Third of 4 2D noises that together define hill/mountain range height.
mgcarpathian_np_height3 (Hilliness3 noise) noise_params_2d 0, 5, (509, 509, 509), 3211, 5, 0.5, 2.0, eased

#    Fourth of 4 2D noises that together define hill/mountain range height.
mgcarpathian_np_height4 (Hilliness4 noise) noise_params_2d 0, 5, (631, 631, 631), 1583, 5, 0.5, 2.0, eased

#    2D noise that controls the size/occurrence of rolling hills.
mgcarpathian_np_hills_terrain (Rolling hills spread noise) noise_params_2d 1, 1, (1301, 1301, 1301), 1692, 3, 0.5, 2.0, eased

#    2D noise that controls the size/occurrence of ridged mountain ranges.
mgcarpathian_np_ridge_terrain (Ridge mountain spread noise) noise_params_2d 1, 1, (1889, 1889, 1889), 3568, 3, 0.5, 2.0, eased

#    2D noise that controls the size/occurrence of step mountain ranges.
mgcarpathian_np_step_terrain (Step mountain spread noise) noise_params_2d 1, 1, (1889, 1889, 1889), 4157, 3, 0.5, 2.0, eased

#    2D noise that controls the shape/size of rolling hills.
mgcarpathian_np_hills (Rolling hill size noise) noise_params_2d 0, 3, (257, 257, 257), 6604, 6, 0.5, 2.0, eased

#    2D noise that controls the shape/size of ridged mountains.
mgcarpathian_np_ridge_mnt (Ridged mountain size noise) noise_params_2d 0, 12, (743, 743, 743), 5520, 6, 0.7, 2.0, eased

#    2D noise that controls the shape/size of step mountains.
mgcarpathian_np_step_mnt (Step mountain size noise) noise_params_2d 0, 8, (509, 509, 509), 2590, 6, 0.6, 2.0, eased

#    2D noise that locates the river valleys and channels.
mgcarpathian_np_rivers (River noise) noise_params_2d 0, 1, (1000, 1000, 1000), 85039, 5, 0.6, 2.0, eased

#    3D noise for mountain overhangs, cliffs, etc. Usually small variations.
mgcarpathian_np_mnt_var (Mountain variation noise) noise_params_3d 0, 1, (499, 499, 499), 2490, 5, 0.55, 2.0

#    First of two 3D noises that together define tunnels.
mgcarpathian_np_cave1 (Cave1 noise) noise_params_3d 0, 12, (61, 61, 61), 52534, 3, 0.5, 2.0

#    Second of two 3D noises that together define tunnels.
mgcarpathian_np_cave2 (Cave2 noise) noise_params_3d 0, 12, (67, 67, 67), 10325, 3, 0.5, 2.0

#    3D noise defining giant caverns.
mgcarpathian_np_cavern (Cavern noise) noise_params_3d 0, 1, (384, 128, 384), 723, 5, 0.63, 2.0

#    3D noise that determines number of dungeons per mapchunk.
mgcarpathian_np_dungeons (Dungeon noise) noise_params_3d 0.9, 0.5, (500, 500, 500), 0, 2, 0.8, 2.0


[**Mapgen Flat]

#    Map generation attributes specific to Mapgen Flat.
#    Occasional lakes and hills can be added to the flat world.
mgflat_spflags (Mapgen Flat specific flags) flags nolakes,nohills,nocaverns lakes,hills,caverns,nolakes,nohills,nocaverns

#    Y of flat ground.
mgflat_ground_level (Ground level) int 8

#    Y of upper limit of large caves.
mgflat_large_cave_depth (Large cave depth) int -33

#    Minimum limit of random number of small caves per mapchunk.
mgflat_small_cave_num_min (Small cave minimum number) int 0 0 256

#    Maximum limit of random number of small caves per mapchunk.
mgflat_small_cave_num_max (Small cave maximum number) int 0 0 256

#    Minimum limit of random number of large caves per mapchunk.
mgflat_large_cave_num_min (Large cave minimum number) int 0 0 64

#    Maximum limit of random number of large caves per mapchunk.
mgflat_large_cave_num_max (Large cave maximum number) int 2 0 64

#    Proportion of large caves that contain liquid.
mgflat_large_cave_flooded (Large cave proportion flooded) float 0.5 0.0 1.0

#    Controls width of tunnels, a smaller value creates wider tunnels.
#    Value >= 10.0 completely disables generation of tunnels and avoids the
#    intensive noise calculations.
mgflat_cave_width (Cave width) float 0.09

#    Terrain noise threshold for lakes.
#    Controls proportion of world area covered by lakes.
#    Adjust towards 0.0 for a larger proportion.
mgflat_lake_threshold (Lake threshold) float -0.45

#    Controls steepness/depth of lake depressions.
mgflat_lake_steepness (Lake steepness) float 48.0

#    Terrain noise threshold for hills.
#    Controls proportion of world area covered by hills.
#    Adjust towards 0.0 for a larger proportion.
mgflat_hill_threshold (Hill threshold) float 0.45

#    Controls steepness/height of hills.
mgflat_hill_steepness (Hill steepness) float 64.0

#    Y-level of cavern upper limit.
mgflat_cavern_limit (Cavern limit) int -256

#    Y-distance over which caverns expand to full size.
mgflat_cavern_taper (Cavern taper) int 256

#    Defines full size of caverns, smaller values create larger caverns.
mgflat_cavern_threshold (Cavern threshold) float 0.7

#    Lower Y limit of dungeons.
mgflat_dungeon_ymin (Dungeon minimum Y) int -31000

#    Upper Y limit of dungeons.
mgflat_dungeon_ymax (Dungeon maximum Y) int 31000


[***Noises]

#    Defines location and terrain of optional hills and lakes.
mgflat_np_terrain (Terrain noise) noise_params_2d 0, 1, (600, 600, 600), 7244, 5, 0.6, 2.0, eased

#    Variation of biome filler depth.
mgflat_np_filler_depth (Filler depth noise) noise_params_2d 0, 1.2, (150, 150, 150), 261, 3, 0.7, 2.0, eased

#    First of two 3D noises that together define tunnels.
mgflat_np_cave1 (Cave1 noise) noise_params_3d 0, 12, (61, 61, 61), 52534, 3, 0.5, 2.0

#    Second of two 3D noises that together define tunnels.
mgflat_np_cave2 (Cave2 noise) noise_params_3d 0, 12, (67, 67, 67), 10325, 3, 0.5, 2.0

#    3D noise defining giant caverns.
mgflat_np_cavern (Cavern noise) noise_params_3d 0, 1, (384, 128, 384), 723, 5, 0.63, 2.0

#    3D noise that determines number of dungeons per mapchunk.
mgflat_np_dungeons (Dungeon noise) noise_params_3d 0.9, 0.5, (500, 500, 500), 0, 2, 0.8, 2.0


[**Mapgen Fractal]

#    Map generation attributes specific to Mapgen Fractal.
#    'terrain' enables the generation of non-fractal terrain:
#    ocean, islands and underground.
mgfractal_spflags (Mapgen Fractal specific flags) flags terrain terrain,noterrain

#    Controls width of tunnels, a smaller value creates wider tunnels.
#    Value >= 10.0 completely disables generation of tunnels and avoids the
#    intensive noise calculations.
mgfractal_cave_width (Cave width) float 0.09

#    Y of upper limit of large caves.
mgfractal_large_cave_depth (Large cave depth) int -33

#    Minimum limit of random number of small caves per mapchunk.
mgfractal_small_cave_num_min (Small cave minimum number) int 0 0 256

#    Maximum limit of random number of small caves per mapchunk.
mgfractal_small_cave_num_max (Small cave maximum number) int 0 0 256

#    Minimum limit of random number of large caves per mapchunk.
mgfractal_large_cave_num_min (Large cave minimum number) int 0 0 64

#    Maximum limit of random number of large caves per mapchunk.
mgfractal_large_cave_num_max (Large cave maximum number) int 2 0 64

#    Proportion of large caves that contain liquid.
mgfractal_large_cave_flooded (Large cave proportion flooded) float 0.5 0.0 1.0

#    Lower Y limit of dungeons.
mgfractal_dungeon_ymin (Dungeon minimum Y) int -31000

#    Upper Y limit of dungeons.
mgfractal_dungeon_ymax (Dungeon maximum Y) int 31000

#    Selects one of 18 fractal types.
#    1 = 4D "Roundy" Mandelbrot set.
#    2 = 4D "Roundy" Julia set.
#    3 = 4D "Squarry" Mandelbrot set.
#    4 = 4D "Squarry" Julia set.
#    5 = 4D "Mandy Cousin" Mandelbrot set.
#    6 = 4D "Mandy Cousin" Julia set.
#    7 = 4D "Variation" Mandelbrot set.
#    8 = 4D "Variation" Julia set.
#    9 = 3D "Mandelbrot/Mandelbar" Mandelbrot set.
#    10 = 3D "Mandelbrot/Mandelbar" Julia set.
#    11 = 3D "Christmas Tree" Mandelbrot set.
#    12 = 3D "Christmas Tree" Julia set.
#    13 = 3D "Mandelbulb" Mandelbrot set.
#    14 = 3D "Mandelbulb" Julia set.
#    15 = 3D "Cosine Mandelbulb" Mandelbrot set.
#    16 = 3D "Cosine Mandelbulb" Julia set.
#    17 = 4D "Mandelbulb" Mandelbrot set.
#    18 = 4D "Mandelbulb" Julia set.
mgfractal_fractal (Fractal type) int 1 1 18

#    Iterations of the recursive function.
#    Increasing this increases the amount of fine detail, but also
#    increases processing load.
#    At iterations = 20 this mapgen has a similar load to mapgen V7.
mgfractal_iterations (Iterations) int 11

#    (X,Y,Z) scale of fractal in nodes.
#    Actual fractal size will be 2 to 3 times larger.
#    These numbers can be made very large, the fractal does
#    not have to fit inside the world.
#    Increase these to 'zoom' into the detail of the fractal.
#    Default is for a vertically-squashed shape suitable for
#    an island, set all 3 numbers equal for the raw shape.
mgfractal_scale (Scale) v3f (4096.0, 1024.0, 4096.0)

#    (X,Y,Z) offset of fractal from world center in units of 'scale'.
#    Can be used to move a desired point to (0, 0) to create a
#    suitable spawn point, or to allow 'zooming in' on a desired
#    point by increasing 'scale'.
#    The default is tuned for a suitable spawn point for Mandelbrot
#    sets with default parameters, it may need altering in other
#    situations.
#    Range roughly -2 to 2. Multiply by 'scale' for offset in nodes.
mgfractal_offset (Offset) v3f (1.79, 0.0, 0.0)

#    W coordinate of the generated 3D slice of a 4D fractal.
#    Determines which 3D slice of the 4D shape is generated.
#    Alters the shape of the fractal.
#    Has no effect on 3D fractals.
#    Range roughly -2 to 2.
mgfractal_slice_w (Slice w) float 0.0

#    Julia set only.
#    X component of hypercomplex constant.
#    Alters the shape of the fractal.
#    Range roughly -2 to 2.
mgfractal_julia_x (Julia x) float 0.33

#    Julia set only.
#    Y component of hypercomplex constant.
#    Alters the shape of the fractal.
#    Range roughly -2 to 2.
mgfractal_julia_y (Julia y) float 0.33

#    Julia set only.
#    Z component of hypercomplex constant.
#    Alters the shape of the fractal.
#    Range roughly -2 to 2.
mgfractal_julia_z (Julia z) float 0.33

#    Julia set only.
#    W component of hypercomplex constant.
#    Alters the shape of the fractal.
#    Has no effect on 3D fractals.
#    Range roughly -2 to 2.
mgfractal_julia_w (Julia w) float 0.33


[***Noises]

#    Y-level of seabed.
mgfractal_np_seabed (Seabed noise) noise_params_2d -14, 9, (600, 600, 600), 41900, 5, 0.6, 2.0, eased

#    Variation of biome filler depth.
mgfractal_np_filler_depth (Filler depth noise) noise_params_2d 0, 1.2, (150, 150, 150), 261, 3, 0.7, 2.0, eased

#    First of two 3D noises that together define tunnels.
mgfractal_np_cave1 (Cave1 noise) noise_params_3d 0, 12, (61, 61, 61), 52534, 3, 0.5, 2.0

#    Second of two 3D noises that together define tunnels.
mgfractal_np_cave2 (Cave2 noise) noise_params_3d 0, 12, (67, 67, 67), 10325, 3, 0.5, 2.0

#    3D noise that determines number of dungeons per mapchunk.
mgfractal_np_dungeons (Dungeon noise) noise_params_3d 0.9, 0.5, (500, 500, 500), 0, 2, 0.8, 2.0


[**Mapgen Valleys]

#    Map generation attributes specific to Mapgen Valleys.
#    'altitude_chill': Reduces heat with altitude.
#    'humid_rivers': Increases humidity around rivers.
#    'vary_river_depth': If enabled, low humidity and high heat causes rivers
#    to become shallower and occasionally dry.
#    'altitude_dry': Reduces humidity with altitude.
mgvalleys_spflags (Mapgen Valleys specific flags) flags altitude_chill,humid_rivers,vary_river_depth,altitude_dry altitude_chill,humid_rivers,vary_river_depth,altitude_dry,noaltitude_chill,nohumid_rivers,novary_river_depth,noaltitude_dry

#    The vertical distance over which heat drops by 20 if 'altitude_chill' is
#    enabled. Also the vertical distance over which humidity drops by 10 if
#    'altitude_dry' is enabled.
mgvalleys_altitude_chill (Altitude chill) int 90

#    Depth below which you'll find large caves.
mgvalleys_large_cave_depth (Large cave depth) int -33

#    Minimum limit of random number of small caves per mapchunk.
mgvalleys_small_cave_num_min (Small cave minimum number) int 0 0 256

#    Maximum limit of random number of small caves per mapchunk.
mgvalleys_small_cave_num_max (Small cave maximum number) int 0 0 256

#    Minimum limit of random number of large caves per mapchunk.
mgvalleys_large_cave_num_min (Large cave minimum number) int 0 0 64

#    Maximum limit of random number of large caves per mapchunk.
mgvalleys_large_cave_num_max (Large cave maximum number) int 2 0 64

#    Proportion of large caves that contain liquid.
mgvalleys_large_cave_flooded (Large cave proportion flooded) float 0.5 0.0 1.0

#    Depth below which you'll find giant caverns.
mgvalleys_cavern_limit (Cavern upper limit) int -256

#    Y-distance over which caverns expand to full size.
mgvalleys_cavern_taper (Cavern taper) int 192

#    Defines full size of caverns, smaller values create larger caverns.
mgvalleys_cavern_threshold (Cavern threshold) float 0.6

#    How deep to make rivers.
mgvalleys_river_depth (River depth) int 4

#    How wide to make rivers.
mgvalleys_river_size (River size) int 5

#    Controls width of tunnels, a smaller value creates wider tunnels.
#    Value >= 10.0 completely disables generation of tunnels and avoids the
#    intensive noise calculations.
mgvalleys_cave_width (Cave width) float 0.09

#    Lower Y limit of dungeons.
mgvalleys_dungeon_ymin (Dungeon minimum Y) int -31000

#    Upper Y limit of dungeons.
mgvalleys_dungeon_ymax (Dungeon maximum Y) int 63


[***Noises]

#    First of two 3D noises that together define tunnels.
mgvalleys_np_cave1 (Cave noise #1) noise_params_3d 0, 12, (61, 61, 61), 52534, 3, 0.5, 2.0

#    Second of two 3D noises that together define tunnels.
mgvalleys_np_cave2 (Cave noise #2) noise_params_3d 0, 12, (67, 67, 67), 10325, 3, 0.5, 2.0

#    The depth of dirt or other biome filler node.
mgvalleys_np_filler_depth (Filler depth) noise_params_2d 0, 1.2, (256, 256, 256), 1605, 3, 0.5, 2.0, eased

#    3D noise defining giant caverns.
mgvalleys_np_cavern (Cavern noise) noise_params_3d 0, 1, (768, 256, 768), 59033, 6, 0.63, 2.0

#    Defines large-scale river channel structure.
mgvalleys_np_rivers (River noise) noise_params_2d 0, 1, (256, 256, 256), -6050, 5, 0.6, 2.0, eased

#    Base terrain height.
mgvalleys_np_terrain_height (Terrain height) noise_params_2d -10, 50, (1024, 1024, 1024), 5202, 6, 0.4, 2.0, eased

#    Raises terrain to make valleys around the rivers.
mgvalleys_np_valley_depth (Valley depth) noise_params_2d 5, 4, (512, 512, 512), -1914, 1, 1.0, 2.0, eased

#    Slope and fill work together to modify the heights.
mgvalleys_np_inter_valley_fill (Valley fill) noise_params_3d 0, 1, (256, 512, 256), 1993, 6, 0.8, 2.0

#    Amplifies the valleys.
mgvalleys_np_valley_profile (Valley profile) noise_params_2d 0.6, 0.5, (512, 512, 512), 777, 1, 1.0, 2.0, eased

#    Slope and fill work together to modify the heights.
mgvalleys_np_inter_valley_slope (Valley slope) noise_params_2d 0.5, 0.5, (128, 128, 128), 746, 1, 1.0, 2.0, eased

#    3D noise that determines number of dungeons per mapchunk.
mgvalleys_np_dungeons (Dungeon noise) noise_params_3d 0.9, 0.5, (500, 500, 500), 0, 2, 0.8, 2.0

[**Advanced]

#    Size of mapchunks generated by mapgen, stated in mapblocks (16 nodes).
#    WARNING!: There is no benefit, and there are several dangers, in
#    increasing this value above 5.
#    Reducing this value increases cave and dungeon density.
#    Altering this value is for special usage, leaving it unchanged is
#    recommended.
chunksize (Chunk size) int 5

#    Dump the mapgen debug information.
enable_mapgen_debug_info (Mapgen debug) bool false

#    Maximum number of blocks that can be queued for loading.
emergequeue_limit_total (Absolute limit of queued blocks to emerge) int 1024

#    Maximum number of blocks to be queued that are to be loaded from file.
#    This limit is enforced per player.
emergequeue_limit_diskonly (Per-player limit of queued blocks load from disk) int 128

#    Maximum number of blocks to be queued that are to be generated.
#    This limit is enforced per player.
emergequeue_limit_generate (Per-player limit of queued blocks to generate) int 128

#    Number of emerge threads to use.
#    Value 0:
#    -    Automatic selection. The number of emerge threads will be
#    -    'number of processors - 2', with a lower limit of 1.
#    Any other value:
#    -    Specifies the number of emerge threads, with a lower limit of 1.
#    WARNING: Increasing the number of emerge threads increases engine mapgen
#    speed, but this may harm game performance by interfering with other
#    processes, especially in singleplayer and/or when running Lua code in
#    'on_generated'. For many users the optimum setting may be '1'.
num_emerge_threads (Number of emerge threads) int 1


[*Network]

# Network port to listen (UDP).
# This value will be overridden when starting from the main menu.
port (Server port) int 30000

#    The network interface that the server listens on.
bind_address (Bind address) string

#    Enable to disallow old clients from connecting.
#    Older clients are compatible in the sense that they will not crash when connecting
#    to new servers, but they may not support all new features that you are expecting.
strict_protocol_version_checking (Strict protocol checking) bool false

#    Specifies URL from which client fetches media instead of using UDP.
#    $filename should be accessible from $remote_media$filename via cURL
#    (obviously, remote_media should end with a slash).
#    Files that are not present will be fetched the usual way.
remote_media (Remote media) string

#    Enable/disable running an IPv6 server.
#    Ignored if bind_address is set.
#    Needs enable_ipv6 to be enabled.
ipv6_server (IPv6 server) bool false


[*Server]

# Name of the server, to be displayed when players join and in the serverlist.
server_name (Server name) string Minetest server

# Description of server, to be displayed when players join and in the serverlist.
server_description (Server description) string mine here

# Domain name of server, to be displayed in the serverlist.
server_address (Server address) string game.minetest.net

# Homepage of server, to be displayed in the serverlist.
server_url (Server URL) string https://minetest.net

# Automatically report to the serverlist.
server_announce (Announce server) bool false

# Announce to this serverlist.
serverlist_url (Serverlist URL) string servers.minetest.net


[General]

# Print extra debugging messages.
debug_mods (Debug mods) bool false

# Logs extra debug messages.
enable_debug_mods (Enable debugging messages) bool false

# Limits flowing liquids.
liquid_finite (Finite liquid) bool false

# Inventory interface to use.
inventory (Inventory interface) enum sfinv sfinv,inventory_plus

# Allow players to craft ATM machines.
allow_atm_craft (Allow ATM crafting) bool true


[*Mobs General]

# Only spawn mobs that don't attack players.
only_peaceful_mobs (Peaceful only) bool false

# Displays nametags above mobs.
enable_mob_nametags (Enable mob nametags) bool false


[*Mounts]

# Mounts turn with player look direction.
#
# Often mounts use the a/d keys for turning. For mods that respect
# this setting, this will be changed to turn with the direction the
# player is looking.
mount_turn_player_look (Turn with look direction) bool false

# Mounted entities can only be used by owners.
mount_ownable (Ownable mounts) bool true

# Place mountable entities in inventory instead of breaking down when punched.
mount_punch_inv (Place object in inventory) bool true



# ---------------------------------------------------------------------------------

[Mods]


[*Mobiles]


[**mobs_redo]

# If false then mobs no longer spawn in world without spawner or spawn egg
mobs_spawn (Spawn Mobs) bool true

# Disable blood splatter when attacking mobs.
mobs_disable_blood (Disable Mob blood) bool false

# If disabled then Mobs no longer destroy world blocks
mobs_griefing (Griefing Mobs) bool true

# If false then Mobs no longer spawn inside player protected areas
mobs_spawn_protected (Spawn Mobs in protected areas) bool true

# If true Mobs will be removed once a map chunk is out of view
remove_far_mobs (Remove far Mobs) bool true

# Sets Mob difficulty level by multiplying punch damage
mob_difficulty (Mob difficulty) float 1.0

# If disabled health status no longer appears above Mob when punched
mob_show_health (Show Mob health) bool true

# Contains a value used to multiply Mob spawn values
mob_chance_multiplier (Mob chance multiplier) float 1.0

# When false Mob no longer drop items when killed
mobs_drop_items (Mob drops) bool true

# Sets minimum distance around player that mobs cannot spawn
mob_nospawn_range (Mob no-spawn range) float 12.0

# Sets maximum number of active mobs in game (0 for unlimited)
mob_active_limit (Mob Active Limit) float 0

# Enables area check when spawning mobs
mob_area_spawn (Mob Area Spawn) bool false

# Enable peaceful player attack prevention
enable_peaceful_player (Mobs do not attack peaceful player without reason) bool false

# If false then Monsters no longer spawn inside player protected areas
mobs_spawn_monster_protected (Spawn Monsters in protected areas) bool true

# Enable mobs smooth rotation
mob_smooth_rotate (Smooth rotation for mobs) bool true

[**cmer]

mobs.particles (Enable particles) bool false

# Displays nametags above mobs.
mobs.nametags (Enable mob nametags) bool false

# Determines if owned entities can be killed by non-owners.
mobs.grief_owned (Players can kill owned) bool false


[**chicken]

# Entity lifespan.
#
# type:    int
# default: 300
chicken.lifetime (Lifespan) int 300 1

# Spawn interval in seconds.
#
# type:    int
# default: 120
chicken.spawn_interval (Spawn interval) int 120 1

# Chance of spawn at interval.
#
# type:    int
# default: 9000
chicken.spawn_chance (Spawn chance) int 9000 1


[**cow]

# Spawn interval in seconds.
#
# type:    int
# default: 60
cow.spawn_interval (Spawn interval) int 60 1

# Chance of spawn at interval.
#
# type:    int
# default: 8000
cow.spawn_chance (Spawn chance) int 8000 1


[**ghost]

# Entity lifespan.
#
# type:    int
# default: 300
ghost.lifetime (Lifespan) int 300 1

# Spawn interval in seconds.
#
# type:    int
# default: 40
ghost.spawn_interval (Spawn interval) int 40 1

# Chance of spawn at interval.
#
# type:    int
# default: 7300
ghost.spawn_chance (Spawn chance) int 7300 1


[**kitten]

# Spawn interval in seconds.
#
# type:    int
# default: 60
kitten.spawn_interval (Spawn interval) int 60 1

# Chance of spawn at interval.
#
# type:    int
# default: 10000
kitten.spawn_chance (Spawn chance) int 10000 1


[**oerkki]

# Entity lifespan.
oerkki.lifetime (Lifespan) int 540 1

# Spawn interval in seconds.
oerkki.spawn_interval (Spawn interval) int 55 1

# Chance of spawn at interval.
oerkki.spawn_chance (Spawn chance) int 7800 1


[**shark]

# Interval in seconds that specifies how often shark spawns.
shark.interval (Shark spawn interval) int 60 0

# Chance for each node of spawning shark at each interval. The value
# is inverted. So a chance of value of 5000 equals 1/5000.
shark.chance (Shark spawn chance) int 5000 0

# Minimum node light required for spawning. "0" is darkest & "14" is
# lightest (daylight).
# See: [Node definition] light_source
shark.min_light (Shark min spawn light) int 4 0 14

# Maximum node light required for spawning. "0" is darkest & "14" is
# lightest (daylight).
# See: [Node definition] light_source
shark.max_light (Shark max spawn light) int 14 0 14

# Minimum height at which shark can spawn.
shark.min_height (Shark min spawn height) int -500

# Maximum height at which shark can spawn.
shark.max_height (Shark max spawn height) int 500

# Times that shark can spawn.
#
# Modes supported:
# | ■ day:   spawns during day
# | ■ night: spawns during night
# | ■ any:   spawns anytime
shark.spawn_time (Shark spawn time) enum any day,night,any


[**skeleton]

# Entity lifespan.
#
# type:    int
# default: 900
skeleton.lifetime (Lifespan) int 900 1

# Spawn interval in seconds.
#
# type:    int
# default: 120 (2 minutes)
skeleton.spawn_interval (Spawn interval) int 120 1

# Chance of spawn at interval.
#
# type:    int
# default: 7000
skeleton.spawn_chance (Spawn chance) int 7000 1


[**sneeker]

# Extra debugging messages.
enable_debug_mods (Mod debugging) bool false

# How long (in seconds) sneeker remains in world after spawn.
#
# Default: 900 (15 minutes)
sneeker.lifetime (Sneeker lifetime) int 900

# Loudness of explosion.
#
# Those with a weak heart might want to turn it down.
sneeker.boom_gain (Boom volume) float 1.5

# Determines whether or not a player must be close for spawn to occur.
sneeker.spawn_require_player_nearby (Require player nearby for spawn) bool true

# Distance in nodes a player must be for spawn to occur.
#
# Only used if `sneeker.spawn_require_player_nearby` enabled.
sneeker.spawn_player_radius (Player spawn detect radius) int 100

# If enabled, mobs not near any players will despawn.
sneeker.despawn_player_far (Despawn sneekers not near players) bool true

# Distance determining if a player is near enough to prevent despawn.
#
# Only used if `sneeker.despawn_player_far` enabled.
sneeker.despawn_player_radius (Player despawn detect radius) int 500

# Sets possibility for spawn.
#
# Rate is the inverted value (e.g. 1/value).
sneeker.spawn_chance (Sneeker spawn chance) int 10000

# Sets frequency of spawn chance. Default 240 is equivalent to 4 minutes (60 * 4).
sneeker.spawn_interval (Sneeker spawn interval) int 240

# Sets the minimum light that a node must have for spawn to occur.
sneeker.spawn_minlight (Sneeker min light for spawn) int 0 0 15

# Sets the maximum light that a node can have for spawn to occur.
sneeker.spawn_maxlight (Sneeker max light for spawn) int 4 0 15

# Sets the lowest position at which sneeker can spawn.
sneeker.spawn_minheight (Sneeker min spawn height) int -31000

# Sets the highest position at which sneeker can spawn.
sneeker.spawn_maxheight (Sneeker max spawn height) int 31000

# Limits the number of entities that can spawn per mapblock (16x16x16).
sneeker.spawn_mapblock_limit (Sneeker spawn limit) int 1

# Comma-separated list of nodes on which sneeker can spawn.
sneeker.spawn_nodes (Sneeker spawn nodes) string default:dirt_with_dry_grass,default:dry_dirt,default:dry_dirt_with_dry_grass,default:desert_sand,nether:rack


[**spider]

# Entity lifespan.
spider.lifetime (Spider lifetime) int 600 1

# Spawn rate frequency.
spider.spawn_interval (Spawn interval) int 60 1

# Chance of spawn at interval.
spider.spawn_chance (Spawn chance) int 7500 1


[**velociraptor]

# Used alternate "feathered" texture.
mobs.velociraptor_feathered (Feathered velociraptor) bool false

# Interval in seconds that specifies how often velociraptor spawns.
mobs.velociraptor_interval (Velociraptor spawn interval) int 30 0

# Chance for each node of spawning velociraptor at each interval. The value
# is inverted. So a chance of value of 32000 equals 1/32000.
mobs.velociraptor_chance (Velociraptor spawn chance) int 32000 0

# Minimum node light required for spawning. "0" is darkest & "14" is
# lightest (daylight).
# See: [Node definition] light_source
mobs.velociraptor_min_light (Velociraptor min spawn light) int 10 0 14

# Maximum node light required for spawning. "0" is darkest & "14" is
# lightest (daylight).
# See: [Node definition] light_source
mobs.velociraptor_max_light (Velociraptor max spawn light) int 14 0 14

# Maximum height at which velociraptor can spawn.
mobs.velociraptor_max_height (Velociraptor max spawn height) int 31000

# Times that velociraptor can spawn.
#
# Modes supported:
# | ■ day:   spawns during day
# | ■ night: spawns during night
# | ■ any:   spawns anytime
mobs.velociraptor_spawn_time (Velociraptor spawn time) enum any day,night,any


[**whinny]

# If enabled, messages all players when spawned.
display_mob_spawn (Display spawn) bool false

# If disabled, whinny will attack players.
whinny.peaceful_only (Only peaceful) bool true

# Inverted chance that entity will spawn.
whinny.spawn_chance (Spawn chance) int 50000 0

# Minimum height at which entity can spawn.
whinny.spawn_height_min (Spawn min height) int -500

# Maximum height at which entity can spawn.
whinny.spawn_height_max (Spawn max height) int 500


[**zombie]

# Entity lifespan.
#
# type:    int
# default: 300 (5 minutes)
zombie.lifetime (Lifespan) int 300 1

# Spawn interval in seconds.
#
# type:    int
# default: 36
zombie.spawn_interval (Spawn interval) int 36 1

# Chance of spawn at interval.
#
# type:    int
# default: 7600
zombie.spawn_chance (Spawn chance) int 7600 1


[*airtanks]

# Number of uses for steel air tanks.
airtanks_steel_uses (Steel air tank uses) int 30 2 1000

# Number of uses for copper air tanks.
airtanks_copper_uses (Copper air tank uses) int 10 2 1000

# Number of uses for bronze air tanks.
airtanks_bronze_uses (Bronze air tank uses) int 20 2 1000

# If 'enable_tool_wear' is enabled, air tanks will begin to wear out when used.
airtanks_enable_wear (Wear out when used) bool true

# Air tanks will wear out even in creative mode.
airtanks_wear_in_creative (Wear out in creative mode) bool true

# Enable double tanks.
airtanks_enable_double (Enable double tanks) bool true

# Enable triple tanks.
airtanks_enable_triple (Enable triple tanks) bool true

# Compressor requires fuel.
airtanks_compressor_needs_fuel (Compressor requires fuel) bool true


[*ambience]
# If enabled will play a random music file from ./minetest/sounds at midnight
ambience_music (Ambience music) bool true

# If enabled then ambience will take over sounds when moving in water
ambience_water_move (Ambience water movement) bool true


[*awards]

# Add default achievements from the awards mod.
awards.add_defaults (Add Default Achievements) bool true


[*bike]

# The maximum speed of a bike in m/s
bike_max_speed (Maximum speed) float 6.9

# The acceleration of a bike in m/s^2
bike_acceleration (Acceleration) float 3.16

# The decceleration of a bike caused by braking in m/s^2
bike_decceleration (Decceleration) float 7.9

# The decceleration of a bike caused by friciton in m/s^2
bike_friction (Friction) float 0.79

# The turning speed of a stopped bike in rad/s
bike_turn_speed (Turn speed) float 1.58

# The speed in m/s bellow which the bike accelerates linearily
bike_friction_cone (Friction cone) float 0.4

# How many nodes can be climbed/jumped
bike_stepheight (Step height) float 0.6 0

# How many nodes can be climbed/jumped with wheely
bike_wheely_stepheight (Wheely step height) float 0.6 0

# The factor by which the turning speed is increased by wheely
bike_wheely_factor (Wheely factor) float 2.0

# The factor by which the bike slows down per second in water
bike_water_friction (Water friction) float 13.8

# The factor by which the bike slows down per second offroad
bike_offroad_friction (Offroad friction) float 1.62


[*bright_night]

# Minimum light level for night time. Must be between 3 and 15.
bright_night_light (Night light level) int 4


[*chatlog]

# Timestamp format (see: https://www.lua.org/pil/22.1.html).
#
# Default: %m/%d/%Y %H:%M:%S (mm/dd/yyyy hh:mm:ss)
chatlog.format (Timestamp format) string %m/%d/%Y %H:%M:%S

# Chatlog is output to single file (chatlog.txt) instead
# of split into files by date (chatlog/YYYY_MM_DD.txt).
chatlog.single_file (Single file chatlog) bool false

# Disables exporting chat.
chatlog.disable (Disable chatlog) bool false


[*cleaner]

# Enables unsafe methods & chat commands.
#
# - cleaner.remove_ore
# - /remove_ores
cleaner.unsafe (Enable unsafe methods) bool false


[*craftguide]

# The progressive mode shows recipes you can craft from items you ever had in your inventory.
craftguide_progressive_mode (Learn crafting recipes progressively) bool false

# Enables/Disables craftguide button in inventory if sfinv mod present.
craftguide.show_inv_button (Show craftguide in inventory) bool false


[*currency]

# Is income enabled?
currency.income_enabled (Is currency income enabled?) bool true

# Is income enabled for creative players?
currency.creative_income_enabled (Is income enabled for creative players?) bool true

# Item that is given as income by the currency mod.
currency.income_item (Currency income item) string currency:minegeld_10

# Number of items given as income.
currency.income_count (Currency income item) int 1 1 65535

# Length of time (in seconds) between checking if a user should get income.
currency.income_period (Currency income period) int 720


[*ethereal]

ethereal.leaftype (0 for 2D plantlike leaves or 1 for 3D) int 0
ethereal.leafwalk (Walkable leaves) bool false

ethereal.cavedirt (Caves cut through dirt) bool true
ethereal.torchdrop (Torches drop when in water) bool true
ethereal.papyruswalk (Papyrus and Bamboo are walkable) bool true
ethereal.lilywalk (Lilypads are walkable) bool true
ethereal.xcraft (Enable X-Craft cheats) bool true
ethereal.flight (Enable Flight Potion) bool true

ethereal.glacier (Glacier biome, 1 = Enable / 0 = Disable) int 1
ethereal.bambo (Bamboo biome, 1 = Enable / 0 = Disable) int 1
ethereal.mesa (Mesa biome, 1 = Enable / 0 = Disable) int 1
ethereal.alpine (Alpine biome, 1 = Enable / 0 = Disable) int 1
ethereal.healing (Healing Tree biome, 1 = Enable / 0 = Disable) int 1
ethereal.snowy (Pine Tree biome, 1 = Enable / 0 = Disable) int 1
ethereal.frost (Blue Frost biome, 1 = Enable / 0 = Disable) int 1
ethereal.grassy (Grassy biome, 1 = Enable / 0 = Disable) int 1
ethereal.caves (Desertstone biome, 1 = Enable / 0 = Disable) int 1
ethereal.grayness (Grey Willow biome, 1 = Enable / 0 = Disable) int 1
ethereal.grassytwo (GrassyTwo biome, 1 = Enable / 0 = Disable) int 1
ethereal.prairie (Prairie biome, 1 = Enable / 0 = Disable) int 1
ethereal.jumble (Jumble biome, 1 = Enable / 0 = Disable) int 1
ethereal.junglee (Jungle biome, 1 = Enable / 0 = Disable) int 1
ethereal.desert (Desert biome, 1 = Enable / 0 = Disable) int 1
ethereal.grove (Banana Grove biome, 1 = Enable / 0 = Disable) int 1
ethereal.mushroom (Mushroom biome, 1 = Enable / 0 = Disable) int 1
ethereal.sandstone (Sandstone biome, 1 = Enable / 0 = Disable) int 1
ethereal.quicksand (Quicksand Bank biome, 1 = Enable / 0 = Disable) int 1
ethereal.plains (Scorched Plains biome, 1 = Enable / 0 = Disable) int 1
ethereal.savanna (Savanna biome, 1 = Enable / 0 = Disable) int 1
ethereal.fiery (Feiry Lava biome, 1 = Enable / 0 = Disable) int 1
ethereal.sandclay (Sandy Clay biome, 1 = Enable / 0 = Disable) int 1
ethereal.swamp (Swamp biome, 1 = Enable / 0 = Disable) int 1
ethereal.sealife (Coral and Seaweed biome, 1 = Enable / 0 = Disable) int 1
ethereal.reefs (MT5 Coral biome, 1 = Enable / 0 = Disable) int 1
ethereal.sakura (Sakura biome, 1 = Enable / 0 = Disable) int 1
ethereal.tundra (Tundra biome, 1 = Enable / 0 = Disable) int 1
ethereal.mediterranean (Mediterranean biome, 1 = Enable / 0 = Disable) int 1


[*equip_wear]

# Enables/Disables wear for tools such as picks, axes,
# shovels, etc.
tool_wear (Enable tool wear) bool true

# Enables/Disables wear for weapons.
weapon_wear (Enable weapon wear) bool true

# Enables/Disables wear for armor.
armor_wear (Enable armor wear) bool true


[*hbarmor]

#If true, automatically hides the armor HUD bar when the player wears no
#armor. Otherwise, the armor bar shows “0%”.
hbarmor_autohide (Automatically hide armor HUD bar) bool true

#Time difference in seconds between updates to the armor HUD bar.
#Increase this number for slow servers.
hbarmor_tick (Armor HUD bar update frequency) float 0.1 0.0 4.0


[*hbsprint]

# If enabled (default), the stamina indicators in the HUD will be automatically hidden shortly
# after stamina has filled up. Otherwise, stamina will always be displayed.
hudbars_autohide_stamina (Automatically hide staminal indicator) bool true

# Sprint speed multiplier.
sprint_speed (Sprint speed multiplier) float 1.3

# Sprint jump multiplier.
sprint_jump (Sprint jump multiplier) float 1.1

# Which key to use for sprint. Default: "Use" ("E" key by default).
sprint_key (Sprint key) enum Use Use

# Require player to move forward only to be able to sprint.
sprint_forward_only (Sprint forward only) bool true

# The amount of particles to spawn behind a sprinting player.
sprint_particles (Particles) float 2

# Drain stamina while sprinting.
sprint_stamina (Stamina) bool true

# The amount of stamina to drain while sprinting.
sprint_stamina_drain (Stamina drain) float 2

# The amount of seconds before starting to replenish stamina.
sprint_stamina_replenish (Stamina replenish) float 2

# Drain satiation while sprinting.
sprint_starve (Starve) bool true

# The amount of satiation to drain while sprinting.
sprint_starve_drain (Starve drain) float 0.5

# Drain air while sprinting under water.
sprint_breath (Breath) bool true

# The amount of air to drain while sprinting under water.
sprint_breath_drain (Breath drain) float 1


[*hidename]

# Use alpha color level to hide nametag instead of clearing text.
hidename.use_alpha (Use nametag alpha level) bool false


[*hud_compass]

#    Define default to place compass and whether to use clock.
#    -1 to -4 = compass only (disabled), -5 to -8 = compass + clock (disabled)
#    1 to 4 = compass only (enabled), 5 to 8 = compass + clock (enabled)
#    (default = -2)
compass_default_corner (Default corner to place compass) enum -2 -8,-7,-6,-5,-4,-3,-2,-1,1,2,3,4,5,6,7,8


[*hudbars]

[**Appearance]

# Specifies how the value indicators (i.e. health, breah, etc.) look.
#
# There are 3 styles available. You can choose between the default
# progress-bar-like bars and the good old statbars like you know from
# vanilla Minetest.
#
# The following values are allowed:
# | ■ progress_bar:
# |     ● A horizontal progress-bar-like bar with a label, showing
# |       numerical value (current, maximum), and an icon. These
# |       bars usually convey the most information. This is the
# |       default and recommended value.
# | ■ statbar_classic:
# |     ● Classic statbar, like in vanilla Minetest. Made out of
# |       up to 20 half-symbols. Those bars represent the vague
# |       ratio between the current value and the maximum value.
# |       1 half-symbol stands for approximately 5% of the maximum
# |       value.
# | ■ statbar_modern:
# |     ● Like the classic statbar, but also supports background
# |       images, this kind of statbar may be considered to be
# |       more user-friendly than the classic statbar. This bar
# |       type closely resembles the mod “Better HUD” [hud] by
# |       BlockMen.
hudbars_bar_type (HUD bars style) enum progress_bar progress_bar,statbar_classic,statbar_modern


# If enabled (default), the breath indicators in the HUD will be automatically hidden shortly
# after the breath has been filled up. Otherwise, the breath will always be displayed.
hudbars_autohide_breath (Automatically hide breath indicators) bool true

# This setting changes the way the HUD bars are ordered on the display. You can choose
# between a zig-zag pattern (default) or a vertically stacked pattern.
#
# The following values are allowed:
# | ■ zigzag:
# |     ● Starting from the left bottom, the next is right
# |       from the first, the next is above the first, the
# |       next is right of the third, etc.
# | ■ stack_up:
# |     ● The HUD bars are stacked vertically, going upwards.
# | ■ stack_down:
# |     ● The HUD bars are stacked vertically, going downwards.
hudbars_alignment_pattern (HUD bars alignment pattern) enum zigzag zigzag,stack_up,stack_down

# This setting allows you to specify the order of the HUD bars explicitly. If left empty
# (the default), the health and breath indicators come first, additional indicators
# may appear in any order. This setting is quite technical and normal users probably do not
# need to worry about it.
#
# Syntax:
# The setting has to be specified as a comma-seperated list of key=value pairs, where a key
# refers to the identifier of a HUD bar and the value refers to the slot number of where the
# HUD bar should be placed. The slot number must be an integer greater of equal to 0. Where
# the HUD bars will be displayed exactly depends on the alignment pattern being used.
# All HUD bars to which no order value has been applied will fill in all slots which have
# not been occupied by the HUD bars specified in this setting, the slots will be filled in
# from the lowest slot number.
# Note that the order of those remaining HUD bars is not fixed, it basically just boils
# down on which mod “came” first. Don't worry, the mod will still work perfectly fine, this
# setting is entirely optional.
# The identifier for the health bar is “health” and the identifier for the breath bar is
# “breath”. For other HUD bars, you have to learn it from the mod which is supplying them.
#
# Be careful not to use slot indices twice, or else different HUD bars will be drawn over
# each other!
#
# Example: “breath=0, health=1”
# This makes the breath bar first and the health bar second, which is the opposite order
# of the default one.
hudbars_sorting (HUD bars order) string

[**Positions and offsets]

# Horizontal (x) main position of the HUD bars over the entire screen.
# 0.0 is left-most, 1.0 is right-most.
# For the zig-zag alignment pattern, this is for the left HUD bars.
hudbars_pos_left_x (Left HUD bar screen x position) float 0.5 0.0 1.0

# Vertical (y) main position of the HUD bars over the entire screen.
# 0.0 is top, 1.0 is bottom.
# For the zig-zag alignment pattern, this is for the left HUD bars.
hudbars_pos_left_y (Left HUD bar screen y position) float 1.0 0.0 1.0

# Horizontal (x) main position of the right HUD bars over the entire screen.
# 0.0 is left-most, 1.0 is right-most.
# Only used for the zig-zag alignment pattern.
hudbars_pos_right_x (Right HUD bar screen x position) float 0.5 0.0 1.0

# Vertical main position (y) of the right HUD bars over the entire screen.
# 0.0 is top, 1.0 is bottom.
# Only used for the zig-zag alignment pattern.
hudbars_pos_right_y (Right HUD bar screen y position) float 1.0 0.0 1.0

# Precise x offset in pixels from the basic screen x position of the HUD bars.
# For the zig-zag alignment pattern, this is for the left HUD bars.
# This setting is used for the progress bar HUD bar style.
hudbars_start_offset_left_x (Left HUD bar x offset) int -175

# Precise y offset in pixels from the basic screen y position of the HUD bars.
# For the zig-zag alignment pattern, this is for the left HUD bars.
# This setting is used for the progress bar HUD bar style.
hudbars_start_offset_left_y (Left HUD bar y offset) int -86

# Precise x offset in pixels from the basic screen x position of the right HUD bars.
# Only used for the zig-zag alignment pattern.
# This setting is used for the progress bar HUD bar style.
hudbars_start_offset_right_x (Right HUD bar x offset) int 15

# Precise y offset in pixels from the basic screen y position of the right HUD bars.
# Only used for the zig-zag alignment pattern.
# This setting is used for the progress bar HUD bar style.
hudbars_start_offset_right_y (Right HUD bar y offset) int -86

# Precise x offset in pixels from the basic screen x position of the HUD statbars.
# For the zig-zag alignment pattern, this is for the left HUD statbars.
# This setting is used for the classic and modern statbar styles.
hudbars_start_statbar_offset_left_x (Left HUD statbar x offset) int -265

# Precise y offset in pixels from the basic screen y position of the HUD statbars.
# For the zig-zag alignment pattern, this is for the left HUD statbars.
# This setting is used for the classic and modern statbar styles.
hudbars_start_statbar_offset_left_y (Left HUD statbar y offset) int -90

# Precise x offset in pixels from the basic screen x position of the right HUD statbars.
# Only used for the zig-zag alignment pattern.
# This setting is used for the classic and modern statbar styles.
hudbars_start_statbar_offset_right_x (Right HUD statbar x offset) int 25

# Precise y offset in pixels from the basic screen y position of the right HUD statbars.
# Only used for the zig-zag alignment pattern.
# This setting is used for the classic and modern statbar styles.
hudbars_start_statbar_offset_right_y (Right HUD statbar y offset) int -90

# The vertical distance between two HUD bars, in pixels.
hudbars_vmargin (Vertical distance between HUD bars) int 24 0

[**Performance]

# The of seconds which need to pass before the server updates the default HUD bars
# (health and breath). Increase this number if you have a slow server or a slow network
# connection and experience performance problems.
hudbars_tick (Default HUD bars update interval) float 0.1 0.0 4.0


[*lighted_helmets]

# List of mods or helmets to exclude.
#
# Example: lighted_helmets.exclude = xtraarmor,amber:helmet
lighted_helmets.exclude (Exclude helmets) string


[*listitems]

# Displays items in a bulleted list.
listitems.bullet_list (Bulleted list) bool true

# Registers "/list<type>" commands.
listitems.enable_singleword (Enable singleword commands) bool true


[*moreblocks]

# If enabled, Stairs+ nodes will be displayed in the inventory when playing in creative mode.
# Disabling this can speed up loading times for clients as fewer nodes need to be registered in the creative inventory.
moreblocks.stairsplus_in_creative_inventory (Display Stairs+ nodes in creative inventory) bool true


[*motorbike]

# Turning speed of bike, 1 is instant.
motorbike.turn_power (Turning speed) float 0.07

# Top speed the bike can go.
motorbike.max_speed (Top speed) float 17

# Top speed in reverse.
motorbike.max_reverse (Top speed reverse) float 5

# Acceleration.
motorbike.acceleration (Acceleration) float 1.5

# Braking power.
motorbike.braking (Braking power) float 5

# Step height.
motorbike.stepheight (Step height) float 1.3

# Whether the bike is breakable.
motorbike.breakable (Breakable) bool true

# Same as max_speed but on nodes like dirt, sand, gravel ect.
motorbike.crumbly_spd (Top speed crumbly) float 11

# Ability to punch the motorbike to kick the rider.
motorbike.kick (Punch kicks rider) bool true

# Enable custom plates, requires "signs" mod.
motorbike.custom_plates (Custom plates) bool true

# If enabled, bike is placed in inventory when punched.
motorbike.punch_inv (Punch places in inventory) bool true


[*pbmarks]

# Number of allowed bookmarks.
pbmarks.max (Number of bookmarks) int 5 1 5

# Don't allow bookmarks to be set in areas not accessible to player.
pbmarks.disallow_protected (Disallow bookmarking in protected areas) bool true


[*pipeworks]

#Enable pipes.
pipeworks_enable_pipes (Enable Pipes) bool true

#Enable autocrafter.
pipeworks_enable_autocrafter (Enable Autocrafter) bool true

#Enable deployer.
pipeworks_enable_deployer (Enable Deployer) bool true

#Enable dispenser.
pipeworks_enable_dispenser (Enable Dispenser) bool true

#Enable node breaker.
pipeworks_enable_node_breaker (Enable Node Breaker) bool true

#Enable teleport tube.
pipeworks_enable_teleport_tube (Enable Teleport Tube) bool true

#Enable pipe devices.
pipeworks_enable_pipe_devices (Enable Pipe Devices) bool true

#Enable redefines.
pipeworks_enable_redefines (Enable Node Redefines) bool true

#Enable sorting tube.
pipeworks_enable_mese_tube (Enable Sorting Tube) bool true

#Enable detector tube.
pipeworks_enable_detector_tube (Enable Detector Tube) bool true

#Enable digiline detector tube.
pipeworks_enable_digiline_detector_tube (Enable Digiline Detector Tube) bool true

#Enable mesecon signal conducting tube.
pipeworks_enable_conductor_tube (Enable Conductor Tube) bool true

#Enable accelerator tube.
pipeworks_enable_accelerator_tube (Enable Accelerator Tube) bool true

#Enable crossing tube.
#It sends all incoming items to the other side, or if there is no other tube, it sends them back.
pipeworks_enable_crossing_tube (Enable Crossing Tube) bool true

#Enable vacuum tube.
#It picks up all items that lay around next to it.
pipeworks_enable_sand_tube (Enable Vacuum Tube) bool true

#Enable mese vacuum tube.
#It's like the normal vacuum tube with the
#differance that you can set the radius up to 8 nodes.
pipeworks_enable_mese_sand_tube (Enable Mese Vacuum Tube) bool true

#Enable one way tube.
#It sends items only in one direction.
#Use it to drop items out of tubes.
pipeworks_enable_one_way_tube (Enable One Way Tube) bool true

#Enable high priority tube.
#It has a very high priority and so, on crossings, the items will
#always go to it if there are multible ways.
pipeworks_enable_priority_tube (Enable High Priority Tube) bool true

#Enable cyclic mode.
pipeworks_enable_cyclic_mode (Enable Cyclic Mode) bool true

#Drop on routing fail.
pipeworks_drop_on_routing_fail (Drop On Routing Fail) bool false

#Delete item on clearobject.
pipeworks_delete_item_on_clearobject (Delete Item On Clearobject) bool true


[*pvp_areas]

# Allow PvP by default.
pvp_areas.enable_pvp (PvP by default) bool false

# When not enabled PvP Control areas are kill zones.
pvp_areas.safemode (PvP Control areas are safe zones) bool false

# If ShadowNinja's `areas` mod is also present with HUD registration feature,
# this label will be displayed anywhere a PvP Control area has been set.
pvp_areas.label (Show PvP area labels) string Defined area.


[*server_shop]

# If currency mod is installed, automatically set up values for minegeld notes.
server_shop.use_currency_defaults (Use currency mod defaults) bool true

# Refunds deposited money when formspec is closed.
server_shop.refund_on_close (Refund on close) bool true


[*slingshot]

# Use old 16x16 textures.
slingshot.old_textures (Old slingshot textures) bool false

# Value of these items will be added to slingshot attack when thrown.
slingshot.ammos (Registered ammos) string default:mese_crystal=5


[*trampoline]

# Percent of damage absorbed when falling on a trampoline. Set to 100 to disable damage.
trampoline.damage_absorb (Trampoline damage absorption) int 100 0 100


[*wardrobe]

# Number of skins shown per page.
wardrobe.skins_per_page (Skins per page) int 8 1 8

# Show preview images.
wardrobe.previews (Show previews) bool true


[*whitelist]

# Enables/Disables whitelist feature.
whitelist.enable (Enable whitelist) bool false

# Sets a custom message to display when access to server is denied.
whitelist.message (Whitelist message) string This server is whitelisted and you are not on the whitelist.


# ---------------------------------------------------------------------------------

[Modpacks]


[*3D Armor]


[**3d_armor]

armor_material_wood (Enable wood armor) bool true
armor_material_cactus (Enable cactus armor) bool true
armor_material_steel (Enable steel armor) bool true
armor_material_bronze (Enable bronze armor) bool true
armor_material_diamond (Enable diamond armor) bool true
armor_material_gold (Enable gold armor) bool true
armor_material_mithril (Enable mithril armor) bool true
armor_material_crystal (Enable crystal armor) bool true
armor_material_nether (Enable nether armor) bool true

# Increase this if you get initialization glitches when a player first joins.
armor_init_delay (Initialization delay) int 2

# Increase this if armor is not getting into bones due to server lag.
armor_bones_delay (Delay for bones) int 1

# How often player armor items are updated.
armor_update_time (Armor refresh rate [seconds]) int 1

# Drop armor when a player dies.
# Uses bones mod if present, otherwise items are dropped around the player.
armor_drop (Drop armor on death) bool true

# Pulverize armor when a player dies, overrides armor_drop.
armor_destroy (Pulverize armor on death) bool false

# You can use this to increase or decrease overall armor effectiveness,
# eg: level_multiplier = 0.5 will reduce armor level by half.
armor_level_multiplier (Armor effectiveness multiplier) float 1

# You can use this to increase or decrease overall armor healing,
# eg: armor_heal_multiplier = 0 will disable healing altogether.
armor_heal_multiplier (Armor healing multiplier) float 1

# Armor set item names, remove or add items to include them or remove them from whats considered an Armor set.
armor_set_elements (Armor set items) string head torso legs feet shield

# Bonus multiplier when wearing armor set, set to the same as armor_level_multiplier to disable
armor_set_multiplier (Armor Set Bonus multiplier) float 1.1

# Enable water protection (periodically restores breath when activated).
armor_water_protect (Enable water protection) bool true

# Enable fire protection (defaults true if using ethereal mod).
armor_fire_protect (Enable fire protection) bool false

# Enable fire damage from torches (defaults true if using ethereal mod).
armor_fire_protect_torch (Enable fire protection torch damage) bool false

# Enable punch damage effects.
armor_punch_damage (Enable damage effects) bool true

# Enable migration of old armor inventories.
armor_migrate_old_inventory (Migrate old armor inventories) bool true

# Armor is not visible on player model when enabled.
armor_transparent (Transparent armor) bool false


[**shields]

shields_disable_sounds (Disable shield sounds) bool false


[**technic_armor]

# Enable or disable technic_armor.
armor_enable_technic (Enable technic armor) bool true


[**wieldview]

# Set number of seconds between visible wielded item updates.
wieldview_update_time (Wieldview refresh rate [seconds]) int 2

# Show nodes as tiles, disabled by default.
wieldview_node_tiles (Show nodes as tiles) bool false


[*Castle]


[**castle_masonry]

[***Materials]
castle_masonry_stonewall (Stonewall) bool true
castle_masonry_cobble (Cobble) bool true
castle_masonry_stonebrick (Stone Brick) bool true
castle_masonry_sandstonebrick (Sandstone Brick) bool true
castle_masonry_desertstonebrick (Desert Stone Brick) bool true
castle_masonry_stone (Stone) bool true
castle_masonry_sandstone (Sandstone) bool true
castle_masonry_desertstone (Desert Stone) bool true
castle_masonry_wood (Wood) bool false
castle_masonry_ice (Ice) bool false
castle_masonry_snow (Snow) bool false
castle_masonry_obsidianbrick (Obsidian Brick) bool false

[***Forms]
castle_masonry_pillar (Pillars) bool true
castle_masonry_arrowslit (Arrow slits) bool true
castle_masonry_murderhole (Murder holes and machicolations) bool true


[**crafting_bench]

# The number of seconds between each operation of the crafting bench.
crafting_bench_crafting_rate (Crafting rate) int 5 1 60


[*Mesecons]

[**mesecons]

mesecon.resumetime (Startup delay) int 4 1 10

# The value at which circuits will overheat.
mesecon.overheat_max (Device heat limit) int 20 1 100

mesecon.cooldown_time (Device cooldown time) float 2.0 0.1 10.0
mesecon.cooldown_granularity (Cooldown step length) float 0.5 0.0 1.0


[**mesecons_blinkyplant]

mesecon.blinky_plant_interval (Plant blinking interval) int 3 1 5


[**mesecons_detector]

mesecon.detector_radius (Player detector scanning radius) int 6 3 16
mesecon.node_detector_distance_max (Node detector distance limit) int 10 1 16


[**mesecons_luacontroller]

mesecon.luacontroller_string_rep_max (string:rep result length limit) int 64000 1000 1000000
mesecon.luacontroller_digiline_maxlen (Digiline message size limit) int 50000 1000 1000000
mesecon.luacontroller_maxevents (Controller execution time limit) int 10000 1000 100000
mesecon.luacontroller_memsize (Controller memory limit) int 100000 10000 1000000


[**mesecons_movestones]

mesecon.movestone_speed (Speed) int 3 1 10
mesecon.movestone_max_push (Max push) int 50 1 100
mesecon.movestone_max_pull (Max pull) int 50 1 100


[**mesecons_pistons]

mesecon.piston_max_push (Max push) int 15 1 100
mesecon.piston_max_pull (Max pull) int 15 1 100


[**mesecons_pressureplates]

mesecon.pplate_interval (Check interval) float 0.1 0.1 1.0


[*Minetest Game]

[**beds]

# If enabled, players respawn at the bed they last lay on instead of normal
# spawn.
# This setting is only read at startup.
enable_bed_respawn (Respawn at bed) bool true

# If enabled, the night can be skipped if more than half of the players are
# in beds.
enable_bed_night_skip (Skip night when sleeping) bool true

# If enabled with 'enable_bed_night_skip', allows any single player in bed
# to skip night.
enable_single_night_skip (Skip night if any player in bed) bool false

[**bones]

# Manages how item loss is handled when a player dies.
#
# Modes supported:
# | ■ bones:
# |     ● Bones containing player's inventory contents are
# |       placed where/near player died.
# | ■ drop:
# |     ● Inventory contents are dropped on the ground.
# | ■ keep:
# |     ● Player does not lose items at death.
bones_mode (Bones mode) enum bones bones,drop,keep

# The time in seconds after which the bones of a dead player can be looted
# by everyone.
#
# Setting this to 0 will disable sharing of bones completely.
share_bones_time (Bones share time) int 1200 0

# How much earlier the bones of a dead player can be looted by everyone if
# the player dies in a protected area they don't own.
#
# 0 to disable. Default is "share_bones_time" divide by four (300).
share_bones_time_early (Bones early share time) int 300 0

[**creative]

# In creative mode players are able to dig all kind of blocks nearly
# instantly, and have access to unlimited resources.
#
# Some of the functionality is only available if this setting is present
# at startup.
creative_mode (Creative mode) bool false

[**default]

# If enabled, lava will "cool" & turn into stone & obsidian when touching
# water.
enable_lavacooling (Lavacooling) bool true

[**fire]

# Flammable nodes will be ignited by nearby igniters. Spreading fire may
# cause severe destruction.
# Spreading fire nodes will disappear when fire is disabled, but
# 'permanent_flame' nodes are unaffected.
enable_fire (Fire) bool true

# Opposite of (& overridden by) 'enable_fire'.
disable_fire (Disable fire) bool false

# Enable flame sound.
flame_sound (Flame sound) bool true

[**give_initial_stuff]

# If enabled, items defined in 'initial_stuff' setting will be given
# to players.
give_initial_stuff (Give initial items) bool false

# Defines what items new players will start with if 'give_initial_stuff' setting
# is enabled.
#
# Comma-separated list: item1,item2 10,item3
initial_stuff (Initial items) string default:sword_stone,default:pick_steel,default:apple 10

[**stairs]

[***Advanced]

# Replaces old stairs with new ones (Only required for older worlds).
enable_stairs_replace_abm (Replace old stairs) bool false

[**tnt]

# When TNT explodes, it destroys nearby nodes and damages nearby players.
#
# NOTE: This setting is disabled by default on servers.
enable_tnt (TNT) bool true

# The radius in which nodes will be destroyed by a TNT explosion.
tnt_radius (TNT radius) int 3 0


[*More Mesecons]

[**moremesecons_adjustable_blinkyplant]

# Minimal interval authorized. Any lower will be set to it.
moremesecons_adjustable_blinky_plant.min_interval (Minimum interval) float 0.5

[**moremesecons_commandblock]

# Space-separated list of authorized commands (empty to authorize all).
moremesecons_commandblock.authorized_commands (Authorized commands) string tell

# Any value less than or equal to 0 will be changed to 1 and a NaN value will be changed to the default value.
moremesecons_commandblock.nearest_max_distance (Nearest player maximum distance) float 8

[**moremesecons_jammer]

# Any value less than or equal to 0 will be changed to 1 and a NaN value will be changed to the default value.
moremesecons_jammer.max_distance (Jammer action range) float 10

# The registration LBM will recover the jammer database if the moremesecons_jammer
# mod storage has been removed, and will create that mod storage after an update
# from an older version which did not use it.
moremesecons_jammer.enable_lbm (Enable Jammer registration LBM) bool false

[**moremesecons_playerkiller]

# Any value less than or equal to 0 will be changed to 1 and a NaN value will be changed to the default value.
moremesecons_playerkiller.max_distance (Player Killer action range) float 8

[**moremesecons_sayer]

# It will work only if:
# * moremesecons_sayer is present in your trusted_mods setting
# * you are playing in singleplayer
# * the speech-dispatcher is installed on your system
# * you are using a POSIX-compliant system and a sh-compatible shell (such as bash, dash, zsh...)
moremesecons_sayer.use_speech_dispatcher (Use Speech Dispatcher) bool true

# Any value less than or equal to 0 will be changed to 1 and a NaN value will be changed to the default value.
moremesecons_sayer.max_distance (Sayer range) float 8

[**moremesecons_teleporter]

# Any value less than or equal to 0 will be changed to 1 and a NaN value will be changed to the default value.
moremesecons_teleporter.max_t2t_distance (Maximum teleporter-to-teleporter distance) float 50

# Any value less than or equal to 0 will be set to 1
moremesecons_teleporter.max_p2t_distance (Maximum player-to-teleporter distance) float 25

# The registration LBM will recover a teleporter network if the moremesecons_teleporter
# mod storage has been removed, and will create that mod storage after an update
# from an older version which did not use it.
moremesecons_teleporter.enable_lbm (Enable Teleporter registration LBM) bool false

[**moremesecons_wireless]

# Whether to enable the wireless jammer node
moremesecons_wireless.enable_jammer (Enable wireless jammer) bool true

# Any value less than or equal to 0 will be changed to 1 and a NaN value will be changed to the default value.
moremesecons_wireless.jammer_max_distance (Wireless Jammer action range) float 15

# The registration LBM will recover a wireless network if the moremesecons_wireless
# mod storage has been removed, and will create that mod storage after an update
# from an older version which did not use it.
moremesecons_wireless.enable_lbm (Enable Wireless registration LBM) bool false
